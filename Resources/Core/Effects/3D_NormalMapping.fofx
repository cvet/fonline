[Effect]
Passes = 2
ShadowPass = 1

[ShaderCommon]
const vec3 LightDir = vec3(0.0, 0.0, 1.0);
const float LightPower = 0.6;
const float CameraAngleCos = 0.9010770213221; // cos(25.7)
const float CameraAngleSin = 0.4336590845875; // sin(25.7)
const float ShadowAngleTan = 0.2548968037538; // tan(14.3)

[VertexShader Pass2]
uniform mat4 ProjectionMatrix;
uniform vec4 Texture1AtlasOffset;
uniform mat4 WorldMatrices[MAX_BONES];

layout(location = 0) in vec3 InPosition;
layout(location = 1) in vec3 InNormal;
layout(location = 2) in vec2 InTexCoord;
layout(location = 3) in vec2 InTexCoordBase;
layout(location = 4) in vec3 InTangent;
layout(location = 5) in vec3 InBinormal;
layout(location = 6) in vec4 InBlendWeights;
layout(location = 7) in vec4 InBlendIndices;

layout(location = 0) out vec2 TexCoord;
layout(location = 1) out vec2 TexCoord2;
layout(location = 2) out vec3 LightVec;

void main(void)
{
    // Skinning
    vec4 weights = InBlendWeights;
    vec4 indices = InBlendIndices;
    vec4 position = vec4(0.0);
    vec3 normal = vec3(0.0);
    vec3 tangent = vec3(0.0);
    vec3 binormal = vec3(0.0);
    for (int i = 0; i < 4; i++) {
        mat4 m44 = WorldMatrices[int(indices.x)];
        mat3 m33 = mat3(m44[0].xyz, m44[1].xyz, m44[2].xyz);
        float w = weights.x;
        position += m44 * vec4(InPosition, 1.0) * w;
        normal += m33 * InNormal * w;
        tangent += m33 * InTangent * w;
        binormal += m33 * InBinormal * w;
        weights = weights.yzwx;
        indices = indices.yzwx;
    }
    
    // Position
    gl_Position = ProjectionMatrix * position;
    
    // Normalization
    normal = normalize(normal);
    tangent = normalize(tangent);
    binormal = normalize(binormal);
    
    // Tangent space
    LightVec.x = dot(LightDir, tangent);
    LightVec.y = dot(LightDir, binormal);
    LightVec.z = dot(LightDir, normal);
    LightVec = normalize(LightVec);
    
    // Pass to fragment shader
    TexCoord = InTexCoord;
    TexCoord2.x = (InTexCoordBase.x * Texture1AtlasOffset.z) + Texture1AtlasOffset.x;
    TexCoord2.y = (InTexCoordBase.y * Texture1AtlasOffset.w) + Texture1AtlasOffset.y;
}

[FragmentShader Pass2]
layout(binding = 0) uniform sampler2D ColorMap;
layout(binding = 1) uniform sampler2D Texture1;

layout(location = 0) in vec2 TexCoord;
layout(location = 1) in vec2 TexCoord2;
layout(location = 2) in vec3 LightVec;

layout(location = 0) out vec4 FragColor;

void main(void)
{
    vec3 normal = 2.0 * texture(Texture1, TexCoord2).rgb - 1.0;
    normal = normalize(normal);
    float lamberFactor = max(0.0, dot(LightVec, normal)) ;
    
    vec4 color;
    color.rgb = vec3(0.0, 0.0, 0.0) + max(LightPower, lamberFactor);
    color.a = 1.0;
    
    FragColor = texture(ColorMap, TexCoord) * color;
}

[VertexShader Pass1]
uniform mat4 ProjectionMatrix;
uniform vec4 GroundPosition;
uniform mat4 WorldMatrices[MAX_BONES];

layout(location = 0) in vec3 InPosition;
layout(location = 1) in vec3 InNormal;
layout(location = 2) in vec2 InTexCoord;
layout(location = 3) in vec2 InTexCoordBase;
layout(location = 4) in vec3 InTangent;
layout(location = 5) in vec3 InBinormal;
layout(location = 6) in vec4 InBlendWeights;
layout(location = 7) in vec4 InBlendIndices;

layout(location = 0) out vec2 TexCoord;

void main(void)
{
    // Skinning
    vec4 weights = InBlendWeights;
    vec4 indices = InBlendIndices;
    vec4 position = vec4(0.0);
    for (int i = 0; i < 4; i++) {
        mat4 m44 = WorldMatrices[int(indices.x)];
        float w = weights.x;
        position += m44 * vec4(InPosition, 1.0) * w;
        weights = weights.yzwx;
        indices = indices.yzwx;
    }
    
    // Calculate shadow position
    float d = (position.y - GroundPosition.y) * CameraAngleCos;
    d -= (GroundPosition.z - position.z) * CameraAngleSin;
    position.y -= d * CameraAngleCos;
    d *= ShadowAngleTan;
    position.y += d * CameraAngleSin;
    position.z -= 10.0;
    
    // Position
    gl_Position = ProjectionMatrix * position;
    
    // Pass to fragment shader
    TexCoord = InTexCoord;
}

[FragmentShader Pass1]
layout(binding = 0) uniform sampler2D ColorMap;

layout(location = 0) in vec2 TexCoord;

layout(location = 0) out vec4 FragColor;

void main(void)
{
    FragColor.rgb = vec3(0.0);
    FragColor.a = texture(ColorMap, TexCoord).a;
}
