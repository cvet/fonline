cmake_minimum_required( VERSION 3.10.2 )
project( FOnlineProject )

# Options
set( FONLINE_VERBOSE_BUILD OFF CACHE BOOL "Verbose build mode" )
set( FONLINE_OUTPUT_BINARIES_PATH "${CMAKE_BINARY_DIR}" CACHE PATH "Binaries output path" )
set( FONLINE_WEB_DEBUG OFF CACHE BOOL "Web debug build" )
set( FONLINE_BUILD_ONLY_EDITOR OFF CACHE BOOL "Build only Editor (for speed up compilation time and testing purposes)" )
set( FONLINE_UNIT_TESTS OFF CACHE BOOL "Build only binaries for Unit Testing" )
set( FONLINE_CODE_COVERAGE OFF CACHE BOOL "Build only binaries for Code Coverage reports" )
set( FONLINE_CUSTOM_VERSION "" CACHE STRING "Custom version for build (integer FO_VERSION in code), use hex digits (0-9, a-f), maximum are 8" )

# Quiet all non-error messages instead ourself
function( message mode )
	if( ${mode} STREQUAL "FATAL_ERROR" )
		_message( FATAL_ERROR ${ARGN} )
	elseif( ${mode} STREQUAL "SEND_ERROR" )
		_message( SEND_ERROR ${ARGN} )
	elseif( FONLINE_VERBOSE_BUILD )
		_message( ${mode} ${ARGN} )
	endif()
endfunction()
function( StatusMessage )
	_message( STATUS ${ARGN} )
endfunction()
function( AbortMessage )
	_message( FATAL_ERROR ${ARGN} )
endfunction()
if( FONLINE_VERBOSE_BUILD )
	StatusMessage( "Verbose build mode" )
	set( CMAKE_VERBOSE_MAKEFILE ON CACHE STRING "Forced by FOnline" FORCE )
else()
	set( CMAKE_VERBOSE_MAKEFILE OFF CACHE STRING "Forced by FOnline" FORCE )
endif()

# Build options
StatusMessage( "Start project generation" )

# Global options
set( BUILD_SHARED_LIBS OFF CACHE STRING "Forced by FOnline" FORCE )

# Temporary variables
set( FO_OS "" )
set( FO_OS_UPPER "" )
set( FO_BUILD_CONFIGURATION "" )
set( FO_BUILD_ONLY_CLIENT NO )
set( FO_BUILD_CLIENT_LIBRARY NO )
set( FO_BUILD_OPTIONS "" )
set( FO_BUILD_LINKER_OPTIONS "" )
set( FO_BUILD_DEFINES "" )
set( FO_CLIENT_OUTPUT "" )
set( FO_SERVER_OUTPUT "" )
set( FO_EDITOR_OUTPUT "" )
set( FO_TESTS_OUTPUT "" )
set( FO_CLIENT_POSTFIX "" )
set( FO_NON_CLIENT_POSTFIX "" )
set( FO_COMMON_SYSTEM_LIBS "" )
set( FO_COMMON_LIBS "" )
set( FO_SERVER_SYSTEM_LIBS "" )
set( FO_SERVER_LIBS "" )
set( FO_CLIENT_SYSTEM_LIBS "" )
set( FO_CLIENT_LIBS "" )
set( FO_RENDER_SYSTEM_LIBS "" )
set( FO_RENDER_LIBS "" )
set( FO_EDITOR_SYSTEM_LIBS "" )
set( FO_EDITOR_LIBS "" )
set( FO_USE_GLEW NO )
set( FO_OUTPUT_BINARIES_PATH "" )
set( FO_GIT_HASH_RESULT "" )
set( FO_GIT_DIFF_RESULT "" )
set( FO_GIT_HASH "" )
set( FO_CUR_VERSION_CONTENT "" )
set( FO_NEW_VERSION_CONTENT "" )
set( FO_VERSION_FILE_PATH "" )
set( FO_SDL_DIR "" )
set( FO_ZLIB_DIR "" )
set( FO_PNG_DIR "" )
set( FO_OGG_DIR "" )
set( FO_VORBIS_DIR "" )
set( FO_THEORA_DIR "" )
set( FO_ACM_DIR "" )
set( FO_SHA_DIR "" )
set( FO_GLEW_DIR "" )
set( FO_NCODE_HOOK_DIR "" )
set( FO_ASSIMP_DIR "" )
set( FO_FBXSDK_DIR "" )
set( FO_CURL_DIR "" )
set( FO_JSON_DIR "" )
set( FO_FMT_DIR "" )
set( FO_ASIO_DIR "" )
set( FO_WEBSOCKETS_DIR "" )
set( FO_BSON_DIR "" )
set( FO_MONGODB_DIR "" )
set( FO_UNQLITE_DIR "" )
set( FO_VARIANT_DIR "" )
set( FO_OPENSSL_DIR "" )
set( FO_DEAR_IMGUI_DIR "" )
set( FO_CATCH2_DIR "" )
set( FO_BACKWARDCPP_DIR "" )
set( FO_SPARK_DIR "" )
set( FO_GLSLANG_DIR "" )
set( FO_SPIRV_CROSS_DIR "" )
set( FO_RAPID_YAML_DIR "" )
set( FO_ANGEL_SCRIPT_SCRIPTING_DIR "" )
set( FO_ANGEL_SCRIPT_DIR "" )
set( FO_ANGEL_SCRIPT_EXT_DIR "" )
set( FO_ANGEL_SCRIPT_SDK_DIR "" )
set( FO_ANGEL_SCRIPT_PREPROCESSOR_DIR "" )
set( FO_MONO_CSHARP_SCRIPTING_DIR "" )
set( FO_MONO_DIR "" )
set( FO_STAR_TREK_SCRIPTING_DIR "" )
set( FO_OGG_SOURCE "" )
set( FO_VORBIS_SOURCE "" )
set( FO_THEORA_SOURCE "" )
set( FO_GLEW_SOURCE "" )
set( FO_IMGUI_SOURCE "" )
set( FO_ANGEL_SCRIPT_SCRIPTING_SOURCE "" )
set( FO_ANGEL_SCRIPT_EXT_SOURCE "" )
set( FO_MONO_CSHARP_SCRIPTING_SOURCE "" )
set( FO_STAR_TREK_SCRIPTING_SOURCE "" )
set( FO_COMMON_SOURCE "" )
set( FO_SERVER_SOURCE "" )
set( FO_CLIENT_SOURCE "" )
set( FO_EDITOR_SOURCE "" )
set( FO_APPLICATIONS "" )
set( FO_CACHE_VARIABLES "" )

# Architecture configuration
if( CMAKE_SIZEOF_VOID_P EQUAL 8 )
	StatusMessage( "CPU architecture: 64-bit" )
elseif( CMAKE_SIZEOF_VOID_P EQUAL 4 )
	StatusMessage( "CPU architecture: 32-bit" )
else()
	message( FATAL_ERROR "Invalid pointer size, nor 8 or 4 bytes" )
endif()

if( WIN32 )
	set( FO_OS "Windows" )
	set( FO_BUILD_CONFIGURATION "RelWithDebInfo" )
	if( CMAKE_SIZEOF_VOID_P EQUAL 8 )
		set( FO_CLIENT_POSTFIX "64" )
	else()
		set( FO_NON_CLIENT_POSTFIX "32" )
	endif()
	set( FO_USE_GLEW YES )
	list( APPEND FO_BUILD_OPTIONS "/MT" "/MP" )
	# Debug: /MTd /MP /RTCc /RTCsu
	list( APPEND FO_BUILD_LINKER_OPTIONS "/INCREMENTAL:NO" )
	list( APPEND FO_BUILD_DEFINES "UNICODE" "_UNICODE" "_CRT_SECURE_NO_WARNINGS" "_CRT_SECURE_NO_DEPRECATE" "_WINSOCK_DEPRECATED_NO_WARNINGS" )
	list( APPEND FO_COMMON_SYSTEM_LIBS "user32" "ws2_32" "version" "winmm" "imm32" "glu32" "dbghelp" "psapi" "d3d9" "gdi32" "xinput" "opengl32" )
elseif( ${CMAKE_SYSTEM_NAME} MATCHES "Linux" )
	set( FO_OS "Linux" )
	set( FO_BUILD_CONFIGURATION "RelWithDebInfo" )
	if( CMAKE_SIZEOF_VOID_P EQUAL 4 )
		set( FO_CLIENT_POSTFIX "32" )
		set( FO_NON_CLIENT_POSTFIX "32" )
	endif()
	find_package( X11 REQUIRED )
	find_package( OpenGL REQUIRED )
	set( FO_USE_GLEW YES )
	list( APPEND FO_RENDER_SYSTEM_LIBS "GL" )
	list( APPEND FO_BUILD_OPTIONS "-O2" "-g" )
	list( APPEND FO_BUILD_LINKER_OPTIONS "-no-pie" "-rdynamic" )
elseif( APPLE AND NOT IOS_PLATFORM )
	set( FO_OS "Mac" )
	set( FO_BUILD_CONFIGURATION "RelWithDebInfo" )
	set( FO_BUILD_ONLY_CLIENT YES )
	find_package( OpenGL REQUIRED )
	set( FO_USE_GLEW YES )
	list( APPEND FO_RENDER_SYSTEM_LIBS ${OPENGL_LIBRARIES} )
	list( APPEND FO_BUILD_OPTIONS "-O2" "-g" )
	list( APPEND FO_BUILD_LINKER_OPTIONS "-no-pie" "-rdynamic" )
elseif( APPLE AND IOS_PLATFORM )
	set( FO_OS "iOS" )
	set( FO_BUILD_CONFIGURATION "Release" )
	set( FO_BUILD_ONLY_CLIENT YES )
	find_library( OPENGLES OpenGLES )
	find_library( METAL Metal )
	find_library( COREGRAPGHICS CoreGraphics )
	find_library( QUARTZCORE QuartzCore )
	find_library( UIKIT UIKit )
	find_library( AVFOUNDATION AVFoundation )
	find_library( GAMECONTROLLER GameController )
	find_library( COREMOTION CoreMotion )
	list( APPEND FO_RENDER_SYSTEM_LIBS ${OPENGLES} ${METAL} ${COREGRAPGHICS} ${QUARTZCORE} ${UIKIT} ${AVFOUNDATION} ${GAMECONTROLLER} ${COREMOTION} )
	unset( OPENGLES )
	unset( METAL )
	unset( COREGRAPGHICS )
	unset( QUARTZCORE )
	unset( UIKIT )
	unset( AVFOUNDATION )
	unset( GAMECONTROLLER )
	unset( COREMOTION )
	list( APPEND FO_BUILD_OPTIONS "-O3" )
	list( APPEND FO_BUILD_LINKER_OPTIONS "-no-pie" )
elseif( ANDROID )
	set( FO_OS "Android" )
	set( FO_BUILD_CONFIGURATION "Release" )
	set( FO_BUILD_ONLY_CLIENT YES )
	set( FO_BUILD_CLIENT_LIBRARY YES )
	list( APPEND FO_RENDER_SYSTEM_LIBS "GLESv1_CM" "GLESv2" )
	list( APPEND FO_COMMON_SYSTEM_LIBS "android" "log" "atomic" )
	list( APPEND FO_BUILD_OPTIONS "-O3" )
	list( APPEND FO_BUILD_LINKER_OPTIONS "-pie" )
elseif( EMSCRIPTEN )
	set( FO_OS "Web" )
	set( FO_BUILD_CONFIGURATION "Release" )
	set( FO_BUILD_ONLY_CLIENT YES )
	set( CMAKE_EXECUTABLE_SUFFIX ".js" )
	list( APPEND FO_BUILD_OPTIONS "-s TOTAL_MEMORY=268435456" ) # 256 Mb
	list( APPEND FO_BUILD_OPTIONS "-s ERROR_ON_UNDEFINED_SYMBOLS=1" )
	list( APPEND FO_BUILD_OPTIONS "-s ALLOW_MEMORY_GROWTH=1" )
	list( APPEND FO_BUILD_OPTIONS "-s USE_WEBGL2=1" )
	list( APPEND FO_BUILD_OPTIONS "-s FORCE_FILESYSTEM=1" )
	list( APPEND FO_BUILD_OPTIONS "-s ENVIRONMENT='web'" )
	list( APPEND FO_BUILD_OPTIONS "-s NO_DYNAMIC_EXECUTION=1" )
	list( APPEND FO_BUILD_OPTIONS "-s USE_SDL_IMAGE=0" )
	list( APPEND FO_BUILD_OPTIONS "-s USE_SDL_TTF=0" )
	list( APPEND FO_BUILD_OPTIONS "-s USE_SDL_NET=0" )
	list( APPEND FO_BUILD_OPTIONS "-s NO_EXIT_RUNTIME=1" )
	list( APPEND FO_BUILD_OPTIONS "-s EXPORTED_RUNTIME_METHODS=\"['FS_createPath', 'FS_createDataFile']\"" )
	list( APPEND FO_BUILD_OPTIONS "-s EXTRA_EXPORTED_RUNTIME_METHODS=\"['Pointer_stringify', 'intArrayFromString', 'UTF8ToString', 'addRunDependency', 'removeRunDependency', 'stackTrace', 'getMemory']\"" )
	list( APPEND FO_BUILD_OPTIONS "--js-library \"${CMAKE_CURRENT_SOURCE_DIR}/ThirdParty/mono/repo/sdks/wasm/library_mono.js\"" )
	if( FONLINE_WEB_DEBUG )
		set( FO_BUILD_CONFIGURATION "Debug" )
		set( FO_CLIENT_POSTFIX "${FO_CLIENT_POSTFIX}_Debug" )
		set( FO_NON_CLIENT_POSTFIX "${FO_NON_CLIENT_POSTFIX}_Debug" )
		list( APPEND FO_BUILD_OPTIONS "-O0" )
		list( APPEND FO_BUILD_OPTIONS "-g3" )
		list( APPEND FO_BUILD_OPTIONS "--memory-init-file 1" )
		list( APPEND FO_BUILD_OPTIONS "-s WASM=0" )
		list( APPEND FO_BUILD_OPTIONS "-s SAFE_HEAP=1" )
		list( APPEND FO_BUILD_OPTIONS "-s ASSERTIONS=1" )
		list( APPEND FO_BUILD_OPTIONS "-s STACK_OVERFLOW_CHECK=1" )
		list( APPEND FO_BUILD_OPTIONS "-s GL_DEBUG=1" )
		list( APPEND FO_BUILD_OPTIONS "-s GL_ASSERTIONS=1" )
		list( APPEND FO_BUILD_OPTIONS "-s GL_TESTING=1" )
		list( APPEND FO_BUILD_OPTIONS "-s ERROR_ON_MISSING_LIBRARIES=1" )
		list( APPEND FO_BUILD_OPTIONS "-s DEMANGLE_SUPPORT=1" )
		list( APPEND FO_BUILD_OPTIONS "-s EXCEPTION_DEBUG=1" )
		list( APPEND FO_BUILD_OPTIONS "-s PRECISE_F32=1" )
		# list( APPEND FO_BUILD_OPTIONS "-s WARN_UNALIGNED=1" )
	else()
		list( APPEND FO_BUILD_OPTIONS "-Oz" )
		list( APPEND FO_BUILD_OPTIONS "--no-heap-copy" )
		list( APPEND FO_BUILD_OPTIONS "-s DISABLE_EXCEPTION_CATCHING=0" )
		# Uncomment these optimizations later, they may give side effects
		# list( APPEND FO_BUILD_OPTIONS "--closure 1" ) - conflicts with NO_DYNAMIC_EXECUTION
		# list( APPEND FO_BUILD_OPTIONS "--llvm-lto 1" )
		# list( APPEND FO_BUILD_OPTIONS "-s INLINING_LIMIT=1" )
	endif()
	list( APPEND FO_BUILD_DEFINES "AS_MAX_PORTABILITY" "WIP_16BYTE_ALIGN" )
else()
	AbortMessage( "Unknown OS!" )
endif()

StatusMessage( "Operating system: ${FO_OS}" )
string( TOUPPER "${FO_OS}" FO_OS_UPPER )
list( APPEND FO_BUILD_DEFINES "FO_${FO_OS_UPPER}" )

StatusMessage( "Configuration: ${FO_BUILD_CONFIGURATION}" )
set( CMAKE_CONFIGURATION_TYPES "${FO_BUILD_CONFIGURATION}" CACHE STRING "Forced by FOnline" FORCE )
set( CMAKE_BUILD_TYPE "${FO_BUILD_CONFIGURATION}" CACHE STRING "Forced by FOnline" FORCE )

StatusMessage( "Binaries output path: ${FONLINE_OUTPUT_BINARIES_PATH}" )
set( FO_OUTPUT_BINARIES_PATH "${FONLINE_OUTPUT_BINARIES_PATH}/Binaries" )
file( MAKE_DIRECTORY "${FO_OUTPUT_BINARIES_PATH}" )
if( ANDROID )
	set( FO_CLIENT_OUTPUT "${FO_OUTPUT_BINARIES_PATH}/Client/${FO_OS}/libs/${ANDROID_ABI}" )
else()
	set( FO_CLIENT_OUTPUT "${FO_OUTPUT_BINARIES_PATH}/Client/${FO_OS}" )
endif()
set( FO_SERVER_OUTPUT "${FO_OUTPUT_BINARIES_PATH}/Server" )
set( FO_EDITOR_OUTPUT "${FO_OUTPUT_BINARIES_PATH}/Editor" )
set( FO_TESTS_OUTPUT "${FO_OUTPUT_BINARIES_PATH}/Tests" )

# Compiler options
set( FO_BUILD_OPTIONS "${FO_BUILD_OPTIONS}" )
string( REPLACE ";" " " FO_BUILD_OPTIONS "${FO_BUILD_OPTIONS}" )
string( STRIP "${FO_BUILD_OPTIONS}" FO_BUILD_OPTIONS )
if( MSVC )
	set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /std:c++17 ${FO_BUILD_OPTIONS}" )
else()
	set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++17 ${FO_BUILD_OPTIONS}" )
endif()
string( STRIP "${CMAKE_CXX_FLAGS}" CMAKE_CXX_FLAGS )
StatusMessage( "Compiler flags: ${CMAKE_CXX_FLAGS}" )
set( CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${FO_BUILD_OPTIONS}" )
if( MSVC )
	set( CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} ${FO_BUILD_OPTIONS}" )
	set( CMAKE_CXX_FLAGS_MINSIZEREL "${CMAKE_CXX_FLAGS_MINSIZEREL} ${FO_BUILD_OPTIONS}" )
	set( CMAKE_CXX_FLAGS_RELWITHDEBINFO "${CMAKE_CXX_FLAGS_RELWITHDEBINFO} ${FO_BUILD_OPTIONS}" )
	set( CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} ${FO_BUILD_OPTIONS}" )
	set( CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} ${FO_BUILD_OPTIONS}" )
	set( CMAKE_C_FLAGS_MINSIZEREL "${CMAKE_C_FLAGS_MINSIZEREL} ${FO_BUILD_OPTIONS}" )
	set( CMAKE_C_FLAGS_RELWITHDEBINFO "${CMAKE_C_FLAGS_RELWITHDEBINFO} ${FO_BUILD_OPTIONS}" )
	set( CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} ${FO_BUILD_OPTIONS}" )
	set( CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${FO_BUILD_LINKER_OPTIONS}" )
	set( CMAKE_EXE_LINKER_FLAGS_DEBUG "${CMAKE_EXE_LINKER_FLAGS_DEBUG} ${FO_BUILD_LINKER_OPTIONS}" )
	set( CMAKE_EXE_LINKER_FLAGS_MINSIZEREL "${CMAKE_EXE_LINKER_FLAGS_MINSIZEREL} ${FO_BUILD_LINKER_OPTIONS}" )
	set( CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO "${CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO} ${FO_BUILD_LINKER_OPTIONS}" )
	set( CMAKE_EXE_LINKER_FLAGS_RELEASE "${CMAKE_EXE_LINKER_FLAGS_RELEASE} ${FO_BUILD_LINKER_OPTIONS}" )
else()
	set( CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${FO_BUILD_OPTIONS} ${FO_LINKER_OPTIONS}" )
	set( CMAKE_EXE_LINKER_FLAGS_DEBUG "${CMAKE_EXE_LINKER_FLAGS_DEBUG} ${FO_BUILD_OPTIONS} ${FO_LINKER_OPTIONS}" )
	set( CMAKE_EXE_LINKER_FLAGS_MINSIZEREL "${CMAKE_EXE_LINKER_FLAGS_MINSIZEREL} ${FO_BUILD_OPTIONS} ${FO_LINKER_OPTIONS}" )
	set( CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO "${CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO} ${FO_BUILD_OPTIONS} ${FO_LINKER_OPTIONS}" )
	set( CMAKE_EXE_LINKER_FLAGS_RELEASE "${CMAKE_EXE_LINKER_FLAGS_RELEASE} ${FO_BUILD_OPTIONS} ${FO_LINKER_OPTIONS}" )
endif()
set( CMAKE_CXX_STANDARD 17 )

# Basic includes
include_directories( "Source/Common" )
include_directories( "Source/Server" )
include_directories( "Source/Client" )
include_directories( "Source/Editor" )

# Embedded resources generation
function( CreateResources dir output )
	# Generate file content
	set( outputString "" )
	file( GLOB bins ${dir}/*.zip )
	foreach( bin ${bins} )
		string( REGEX MATCH "([^/]+)$" filename ${bin} )
		string( REGEX REPLACE "\\.| " "_" filename ${filename} )
		file( READ ${bin} filedata HEX )
		string( REGEX REPLACE "([0-9a-f][0-9a-f])" "0x\\1, " filedata ${filedata} )
		string( APPEND outputString "const unsigned char Resource_${filename}[] = { ${filedata}};" )
	endforeach()

	# Write if content different
	set( outputHash "" )
	if( EXISTS ${output} )
		file( MD5 ${output} outputHash )
	endif()
	string( MD5 outputStringHash "${outputString}" )
	if( NOT "${outputStringHash}" STREQUAL "${outputHash}" )
		StatusMessage( "Generate embedded resources" )
		file( WRITE ${output} "${outputString}" )
	endif()
endfunction()

CreateResources( "Resources/Embedded" "${CMAKE_BINARY_DIR}/EmbeddedResources/EmbeddedResources_Include.h" )
include_directories( "${CMAKE_BINARY_DIR}/EmbeddedResources" )

# Unique hash for build
if( FONLINE_CUSTOM_VERSION STREQUAL "" )
	execute_process( COMMAND git rev-parse --short=7 HEAD WORKING_DIRECTORY "${CMAKE_HOME_DIRECTORY}" RESULT_VARIABLE FO_GIT_HASH_RESULT OUTPUT_VARIABLE FO_GIT_HASH )
	execute_process( COMMAND git diff-index --quiet HEAD WORKING_DIRECTORY "${CMAKE_HOME_DIRECTORY}" RESULT_VARIABLE FO_GIT_DIFF_RESULT )
	string( STRIP "${FO_GIT_HASH}" FO_GIT_HASH )
	if( NOT FO_GIT_HASH_RESULT STREQUAL "0" OR NOT FO_GIT_DIFF_RESULT STREQUAL "0" )
		string( RANDOM LENGTH 5 ALPHABET "0123456789abcdef" SOME_RANDOM )
		set( FONLINE_CUSTOM_VERSION "fff${SOME_RANDOM}" CACHE STRING "Custom version for build (integer FO_VERSION in code), use hex digits (0-9, a-f), maximum are 8" FORCE )
	endif()
endif()

if( FONLINE_CUSTOM_VERSION STREQUAL "" )
	if( $ENV{GITHUB_SHA} )
		StatusMessage( "Build version: ${FO_GIT_HASH} (commit hash at GitHub)" )
		set( FO_NEW_VERSION_CONTENT "const int FO_VERSION = 0x${FO_GIT_HASH}; /* Commit hash at GitHub */ const bool FO_GITHUB = true;" )
	else()
		StatusMessage( "Build version: ${FO_GIT_HASH} (commit hash)" )
		set( FO_NEW_VERSION_CONTENT "const int FO_VERSION = 0x${FO_GIT_HASH}; /* Commit hash */ const bool FO_GITHUB = false;" )
	endif()
	file( WRITE "${FONLINE_OUTPUT_BINARIES_PATH}/FOnlineVersion.txt" "${FO_GIT_HASH}" )
else()
	StatusMessage( "Build version: ${FONLINE_CUSTOM_VERSION} (custom version)" )
	set( FO_NEW_VERSION_CONTENT "const int FO_VERSION = 0x${FONLINE_CUSTOM_VERSION}; /* Custom version */ const bool FO_GITHUB = false;" )
	file( WRITE "${FONLINE_OUTPUT_BINARIES_PATH}/FOnlineVersion.txt" "${FONLINE_CUSTOM_VERSION}" )
endif()

set( FO_CUR_VERSION_CONTENT "" )
set( FO_VERSION_FILE_PATH "${CMAKE_BINARY_DIR}/EmbeddedResources/Version_Include.h" )
if( EXISTS "${FO_VERSION_FILE_PATH}" )
	file( READ "${FO_VERSION_FILE_PATH}" FO_CUR_VERSION_CONTENT )
endif()
if( NOT "${FO_CUR_VERSION_CONTENT}" STREQUAL "${FO_NEW_VERSION_CONTENT}" )
	file( WRITE "${FO_VERSION_FILE_PATH}" "${FO_NEW_VERSION_CONTENT}" )
endif()

# Third-party libs
StatusMessage( "Third-party libs:" )

function( DisableLibWarnings )
	foreach( lib ${ARGV} )
		target_compile_options( ${lib} PRIVATE
			$<$<OR:$<CXX_COMPILER_ID:Clang>,$<CXX_COMPILER_ID:AppleClang>,$<CXX_COMPILER_ID:GNU>>:-w>
			$<$<CXX_COMPILER_ID:MSVC>:/W0> )
	endforeach()
endfunction()

# SDL2
StatusMessage( "+ SDL2" )
set( FO_SDL_DIR "ThirdParty/SDL2" )
set( SDL_SHARED OFF CACHE STRING "Forced by FOnline" FORCE )
set( SDL_STATIC ON CACHE STRING "Forced by FOnline" FORCE )
set( RENDER_D3D OFF CACHE STRING "Forced by FOnline" FORCE )
set( LIBC ON CACHE STRING "Forced by FOnline" FORCE )
set( SDL_AUDIO ON CACHE STRING "Forced by FOnline" FORCE )
set( SDL_VIDEO ON CACHE STRING "Forced by FOnline" FORCE )
set( SDL_RENDER ON CACHE STRING "Forced by FOnline" FORCE )
set( SDL_EVENTS ON CACHE STRING "Forced by FOnline" FORCE )
set( SDL_LOADSO ON CACHE STRING "Forced by FOnline" FORCE )
set( SDL_ATOMIC OFF CACHE STRING "Forced by FOnline" FORCE )
set( SDL_JOYSTICK OFF CACHE STRING "Forced by FOnline" FORCE )
set( SDL_HAPTIC OFF CACHE STRING "Forced by FOnline" FORCE )
set( SDL_POWER ON CACHE STRING "Forced by FOnline" FORCE )
set( SDL_THREADS ON CACHE STRING "Forced by FOnline" FORCE )
set( SDL_TIMERS ON CACHE STRING "Forced by FOnline" FORCE )
set( SDL_FILE ON CACHE STRING "Forced by FOnline" FORCE )
set( SDL_CPUINFO OFF CACHE STRING "Forced by FOnline" FORCE )
set( SDL_FILESYSTEM OFF CACHE STRING "Forced by FOnline" FORCE )
set( SDL_DLOPEN ON CACHE STRING "Forced by FOnline" FORCE )
if( ANDROID )
	set( SDL_JOYSTICK ON CACHE STRING "Forced by FOnline" FORCE )
	set( PTHREADS OFF CACHE STRING "Forced by FOnline" FORCE )
	set( HIDAPI OFF CACHE STRING "Forced by FOnline" FORCE )
endif()
if( APPLE AND IOS_PLATFORM )
	set( SDL_JOYSTICK ON CACHE STRING "Forced by FOnline" FORCE )
	set( SDL_HAPTIC ON CACHE STRING "Forced by FOnline" FORCE )
endif()
if( EMSCRIPTEN )
	set( SDL_JOYSTICK ON CACHE STRING "Forced by FOnline" FORCE )
endif()
add_subdirectory( "${FO_SDL_DIR}" )
include_directories( "${FO_SDL_DIR}/include" )
list( APPEND FO_BUILD_DEFINES "GL_GLEXT_PROTOTYPES" )
target_compile_definitions( SDL2main PRIVATE "GL_GLEXT_PROTOTYPES" )
target_compile_definitions( SDL2-static PRIVATE "GL_GLEXT_PROTOTYPES" )
list( APPEND FO_RENDER_LIBS "SDL2main" "SDL2-static" )
DisableLibWarnings( SDL2main SDL2-static )

# Zlib
StatusMessage( "+ Zlib" )
set( FO_ZLIB_DIR "ThirdParty/zlib" )
add_subdirectory( "${FO_ZLIB_DIR}" )
include_directories( "${FO_ZLIB_DIR}" "${FO_ZLIB_DIR}/contrib" "${CMAKE_BINARY_DIR}/${FO_ZLIB_DIR}" )
list( APPEND FO_COMMON_LIBS "zlibstatic" )
DisableLibWarnings( zlibstatic )

# PNG
StatusMessage( "+ PNG" )
if( NOT ( ANDROID OR ( APPLE AND IOS_PLATFORM ) OR EMSCRIPTEN ) )
	set( FO_PNG_DIR "ThirdParty/PNG" )
	set( SKIP_INSTALL_ALL ON CACHE STRING "Forced by FOnline" FORCE )
	set( ZLIB_LIBRARY "zlibstatic" CACHE STRING "Forced by FOnline" FORCE )
	set( ZLIB_INCLUDE_DIR "../${FO_ZLIB_DIR}" "${CMAKE_BINARY_DIR}/${FO_ZLIB_DIR}" CACHE STRING "Forced by FOnline" FORCE )
	set( PNG_SHARED OFF CACHE STRING "Forced by FOnline" FORCE )
	set( PNG_STATIC ON CACHE STRING "Forced by FOnline" FORCE )
	add_subdirectory( "${FO_PNG_DIR}" )
	include_directories( "${FO_PNG_DIR}" "${CMAKE_BINARY_DIR}/${FO_PNG_DIR}" )
	list( APPEND FO_COMMON_LIBS "png16_static" )
	DisableLibWarnings( png16_static )
endif()

# Ogg & Vorbis & Theora & Acm
if( YES )
	# Ogg
	StatusMessage( "+ Ogg" )
	set( FO_OGG_DIR "ThirdParty/ogg" )
	file( GLOB FO_OGG_SOURCE "${FO_OGG_DIR}/src/*.c" )
	include_directories( "${FO_OGG_DIR}/include" )
	add_library( Ogg ${FO_OGG_SOURCE} )
	list( APPEND FO_CLIENT_LIBS "Ogg" )
	DisableLibWarnings( Ogg )

	# Vorbis
	StatusMessage( "+ Vorbis" )
	set( FO_VORBIS_DIR "ThirdParty/Vorbis" )
	file( GLOB FO_VORBIS_SOURCE "${FO_VORBIS_DIR}/lib/*.c" )
	list( REMOVE_ITEM FO_VORBIS_SOURCE "${CMAKE_CURRENT_SOURCE_DIR}/${FO_VORBIS_DIR}/lib/barkmel.c" )
	list( REMOVE_ITEM FO_VORBIS_SOURCE "${CMAKE_CURRENT_SOURCE_DIR}/${FO_VORBIS_DIR}/lib/psytune.c" )
	list( REMOVE_ITEM FO_VORBIS_SOURCE "${CMAKE_CURRENT_SOURCE_DIR}/${FO_VORBIS_DIR}/lib/tone.c" )
	include_directories( "${FO_VORBIS_DIR}/include" )
	include_directories( "${FO_VORBIS_DIR}/lib" )
	add_library( Vorbis ${FO_VORBIS_SOURCE} )
	target_link_libraries( Vorbis Ogg )
	list( APPEND FO_CLIENT_LIBS "Vorbis" )
	DisableLibWarnings( Vorbis )

	# Theora
	StatusMessage( "+ Theora" )
	set( FO_THEORA_DIR "ThirdParty/Theora" )
	file( GLOB FO_THEORA_SOURCE "${FO_THEORA_DIR}/lib/*.c" )
	list( REMOVE_ITEM FO_THEORA_SOURCE "${CMAKE_CURRENT_SOURCE_DIR}/${FO_THEORA_DIR}/lib/analyze.c" )
	list( REMOVE_ITEM FO_THEORA_SOURCE "${CMAKE_CURRENT_SOURCE_DIR}/${FO_THEORA_DIR}/lib/encode.c" )
	list( REMOVE_ITEM FO_THEORA_SOURCE "${CMAKE_CURRENT_SOURCE_DIR}/${FO_THEORA_DIR}/lib/encapiwrapper.c" )
	include_directories( "${FO_THEORA_DIR}/include" )
	add_library( Theora ${FO_THEORA_SOURCE} )
	list( APPEND FO_CLIENT_LIBS "Theora" )
	DisableLibWarnings( Theora )

	# Acm
	StatusMessage( "+ Acm" )
	set( FO_ACM_DIR "ThirdParty/Acm" )
	add_subdirectory( "${FO_ACM_DIR}" )
	include_directories( "${FO_ACM_DIR}" )
	list( APPEND FO_CLIENT_LIBS "Acm" )
	DisableLibWarnings( Acm )
endif()

# SHA
StatusMessage( "+ SHA" )
set( FO_SHA_DIR "ThirdParty/SHA" )
add_subdirectory( "${FO_SHA_DIR}" )
include_directories( "${FO_SHA_DIR}" )
list( APPEND FO_COMMON_LIBS "SHA" )
DisableLibWarnings( SHA )

# GLEW
if( FO_USE_GLEW )
	StatusMessage( "+ GLEW" )
	set( FO_GLEW_DIR "ThirdParty/GLEW" )
	file( GLOB FO_GLEW_SOURCE "${FO_GLEW_DIR}/GL/*.*" )
	include_directories( "${FO_GLEW_DIR}" )
	add_library( GLEW ${FO_GLEW_SOURCE} )
	list( APPEND FO_BUILD_DEFINES "GLEW_STATIC" )
	target_compile_definitions( GLEW PRIVATE "GLEW_STATIC" )
	list( APPEND FO_RENDER_LIBS "GLEW" )
	DisableLibWarnings( GLEW )
endif()

# NCodeHook
if( WIN32 )
	StatusMessage( "+ NCodeHook" )
	set( FO_NCODE_HOOK_DIR "ThirdParty/NCodeHook" )
	add_subdirectory( "${FO_NCODE_HOOK_DIR}" )
	include_directories( "${FO_NCODE_HOOK_DIR}" )
	list( APPEND FO_COMMON_LIBS "NCodeHook" )
	DisableLibWarnings( NCodeHook )
endif()

# Assimp
set( FO_ASSIMP_DIR "ThirdParty/Assimp" )
if( NOT FO_BUILD_ONLY_CLIENT )
	StatusMessage( "+ Assimp" )
	set( ASSIMP_NO_EXPORT ON CACHE STRING "Forced by FOnline" FORCE )
	set( ASSIMP_BUILD_ASSIMP_TOOLS OFF CACHE STRING "Forced by FOnline" FORCE )
	set( ASSIMP_BUILD_ASSIMP_VIEW OFF CACHE STRING "Forced by FOnline" FORCE )
	set( ASSIMP_BUILD_SAMPLES OFF CACHE STRING "Forced by FOnline" FORCE )
	set( ASSIMP_BUILD_TESTS OFF CACHE STRING "Forced by FOnline" FORCE )
	set( ASSIMP_OPT_BUILD_PACKAGES OFF CACHE STRING "Forced by FOnline" FORCE )
	set( ASSIMP_INSTALL_PDB OFF CACHE STRING "Forced by FOnline" FORCE )
	set( IGNORE_GIT_HASH ON CACHE STRING "Forced by FOnline" FORCE )
	add_subdirectory( "${FO_ASSIMP_DIR}" )
	include_directories( "${CMAKE_BINARY_DIR}/${FO_ASSIMP_DIR}/include" )
	list( APPEND FO_EDITOR_LIBS "assimp" "IrrXML" )
	DisableLibWarnings( assimp IrrXML )
else()
	StatusMessage( "+ Assimp headers" )
endif()
include_directories( "${FO_ASSIMP_DIR}/include" )

# Fbx SDK
if( NOT FO_BUILD_ONLY_CLIENT )
	StatusMessage( "+ Fbx SDK" )
	set( FO_FBXSDK_DIR "ThirdParty/fbxsdk" )
	include_directories( "${FO_FBXSDK_DIR}" )
	if( WIN32 )
		if( CMAKE_SIZEOF_VOID_P EQUAL 8 )
			list( APPEND FO_EDITOR_SYSTEM_LIBS "${CMAKE_CURRENT_SOURCE_DIR}/ThirdParty/fbxsdk/fbxsdk-libs/Windows/libfbxsdk-mt-release-x64.lib" )
		else()
			list( APPEND FO_EDITOR_SYSTEM_LIBS "${CMAKE_CURRENT_SOURCE_DIR}/ThirdParty/fbxsdk/fbxsdk-libs/Windows/libfbxsdk-mt-release-x86.lib" )
		endif()
	else()
		list( APPEND FO_EDITOR_SYSTEM_LIBS "${CMAKE_CURRENT_SOURCE_DIR}/ThirdParty/fbxsdk/fbxsdk-libs/Linux/libfbxsdk-release-x64.a" )
	endif()
endif()

# Nlohmann Json
StatusMessage( "+ Nlohmann Json" )
set( FO_JSON_DIR "ThirdParty/Json" )
include_directories( "${FO_JSON_DIR}" )

# Fmt
StatusMessage( "+ Fmt" )
set( FO_FMT_DIR "ThirdParty/fmt" )
add_subdirectory( "${FO_FMT_DIR}" )
include_directories( "${FO_FMT_DIR}/include" )
list( APPEND FO_COMMON_LIBS "fmt" )
DisableLibWarnings( fmt )

# OpenSSL
if( NOT FO_BUILD_ONLY_CLIENT )
	StatusMessage( "+ OpenSSL" )
	set( FO_OPENSSL_DIR "ThirdParty/openssl" )
	set( BUILD_OBJECT_LIBRARY_ONLY ON CACHE BOOL "Forced by FOnline" FORCE )
	add_subdirectory( "${FO_OPENSSL_DIR}" )
	include_directories( "${FO_OPENSSL_DIR}" )
	include_directories( "${CMAKE_BINARY_DIR}/${FO_OPENSSL_DIR}/crypto" )
	include_directories( "${CMAKE_BINARY_DIR}/${FO_OPENSSL_DIR}/ssl" )
	list( APPEND FO_SERVER_LIBS "ssl" "crypto" )
	DisableLibWarnings( ssl crypto )
endif()

# Asio & Websockets
if( NOT FO_BUILD_ONLY_CLIENT )
	StatusMessage( "+ Asio" )
	set( FO_ASIO_DIR "ThirdParty/Asio" )
	include_directories( "${FO_ASIO_DIR}/include" )

	StatusMessage( "+ Websockets" )
	set( FO_WEBSOCKETS_DIR "ThirdParty/websocketpp" )
	include_directories( "${FO_WEBSOCKETS_DIR}" )
endif()

# MongoDB & Bson
if( NOT FO_BUILD_ONLY_CLIENT )
	StatusMessage( "+ Bson" )
	set( FO_BSON_DIR "ThirdParty/libbson" )
	set( ENABLE_STATIC ON CACHE STRING "Forced by FOnline" FORCE )
	set( BSON_ENABLE_STATIC ON CACHE STRING "Forced by FOnline" FORCE )
	add_subdirectory( "${FO_BSON_DIR}" )
	set( BSON_INCLUDE_DIR "${CMAKE_BINARY_DIR}/${FO_BSON_DIR}/src/bson"
		"${CMAKE_CURRENT_SOURCE_DIR}/${FO_BSON_DIR}/src/bson" CACHE STRING "Forced by FOnline" FORCE )
	set( BSON_LIBRARIES "bson_static" CACHE STRING "Forced by FOnline" FORCE )
	set( BSON_STATIC_LIBRARIES "bson_static" CACHE STRING "Forced by FOnline" FORCE )
	include_directories( "${BSON_INCLUDE_DIR}" )
	target_compile_definitions( bson_static PRIVATE "BSON_COMPILATION;BSON_STATIC;JSONSL_PARSE_NAN" )
	list( APPEND FO_BUILD_DEFINES "BSON_COMPILATION" "BSON_STATIC" "JSONSL_PARSE_NAN" )
	list( APPEND FO_SERVER_LIBS "bson_static" )
	DisableLibWarnings( bson_static )

	StatusMessage( "+ MongoDB" )
	set( FO_MONGODB_DIR "ThirdParty/mongo-c-driver" )
	set( ENABLE_SASL "OFF" CACHE STRING "Forced by FOnline" FORCE )
	set( MONGOC_ENABLE_STATIC ON CACHE STRING "Forced by FOnline" FORCE )
	add_subdirectory( "${FO_MONGODB_DIR}" )
	set( MONGOC_INCLUDE_DIR "${CMAKE_BINARY_DIR}/${FO_MONGODB_DIR}/src/mongoc"
		"${CMAKE_CURRENT_SOURCE_DIR}/${FO_MONGODB_DIR}/src/mongoc" CACHE STRING "Forced by FOnline" FORCE )
	include_directories( "${MONGOC_INCLUDE_DIR}" )
	target_compile_definitions( mongoc_static PRIVATE "BSON_COMPILATION;BSON_STATIC;JSONSL_PARSE_NAN" )
	list( APPEND FO_SERVER_LIBS "mongoc_static" )
	DisableLibWarnings( mongoc_static )
endif()

# Unqlite
if( NOT EMSCRIPTEN )
	StatusMessage( "+ Unqlite" )
	set( FO_UNQLITE_DIR "ThirdParty/unqlite" )
	add_subdirectory( "${FO_UNQLITE_DIR}" )
	include_directories( "${FO_UNQLITE_DIR}" )
	list( APPEND FO_COMMON_LIBS "unqlite" )
	DisableLibWarnings( unqlite )
endif()

# cURL
if( NOT FO_BUILD_ONLY_CLIENT )
	StatusMessage( "+ cURL" )
	set( FO_CURL_DIR "ThirdParty/cURL" )
	set( HAVE_POLL_FINE_EXITCODE 0 CACHE STRING "Forced by FOnline" FORCE )
	set( CURL_STATICLIB ON CACHE STRING "Forced by FOnline" FORCE )
	set( CURL_CA_PATH "none" CACHE STRING "Forced by FOnline" FORCE )
	set( BUILD_CURL_EXE OFF CACHE STRING "Forced by FOnline" FORCE )
	set( BUILD_TESTING OFF CACHE STRING "Forced by FOnline" FORCE )
	set( CMAKE_USE_OPENSSL OFF CACHE STRING "Forced by FOnline" FORCE )
	set( OPENSSL_INCLUDE_DIR "${CMAKE_BINARY_DIR}/${FO_OPENSSL_DIR}/ssl" CACHE STRING "Forced by FOnline" FORCE )
	add_subdirectory( "${FO_CURL_DIR}" )
	include_directories( "${FO_CURL_DIR}/include" )
	target_compile_definitions( libcurl PRIVATE "CURL_STATICLIB" )
	list( APPEND FO_BUILD_DEFINES "CURL_STATICLIB" )
	list( APPEND FO_SERVER_LIBS "libcurl" )
	DisableLibWarnings( libcurl )
endif()

# Dear ImGui
StatusMessage( "+ Dear ImGui" )
set( FO_DEAR_IMGUI_DIR "ThirdParty/imgui" )
file( GLOB FO_IMGUI_SOURCE "${FO_DEAR_IMGUI_DIR}/*.cpp" "${FO_DEAR_IMGUI_DIR}/*.h" )
#list( REMOVE_ITEM FO_IMGUI_SOURCE "${CMAKE_CURRENT_SOURCE_DIR}/${FO_DEAR_IMGUI_DIR}/imgui_demo.cpp" )
#list( REMOVE_ITEM FO_IMGUI_SOURCE "${CMAKE_CURRENT_SOURCE_DIR}/${FO_DEAR_IMGUI_DIR}/imgui_demo.h" )
include_directories( "${FO_DEAR_IMGUI_DIR}" )
add_library( ImGui ${FO_IMGUI_SOURCE} )
target_compile_definitions( ImGui PRIVATE "IMGUI_DISABLE_OBSOLETE_FUNCTIONS" )
list( APPEND FO_BUILD_DEFINES "IMGUI_DISABLE_OBSOLETE_FUNCTIONS" )
list( APPEND FO_COMMON_LIBS "ImGui" )
DisableLibWarnings( ImGui )

# Catch2
StatusMessage( "+ Catch2" )
set( FO_CATCH2_DIR "ThirdParty/Catch2" )
include_directories( "${FO_CATCH2_DIR}/single_include/catch2" )

# Backward-cpp
if( NOT WIN32 )
	StatusMessage( "+ Backward-cpp" )
	set( FO_BACKWARDCPP_DIR "ThirdParty/backward-cpp" )
	include_directories( "${FO_BACKWARDCPP_DIR}" )
	if( FO_OS STREQUAL "Linux" )
		list( APPEND FO_COMMON_SYSTEM_LIBS "bfd" )
	endif()
endif()

# Spark
StatusMessage( "+ Spark" )
set( FO_SPARK_DIR "ThirdParty/spark" )
set( SPARK_STATIC_BUILD ON CACHE BOOL "Forced by FOnline" FORCE )
add_subdirectory( "${FO_SPARK_DIR}/projects/engine/core" )
include_directories( "${CMAKE_BINARY_DIR}/${FO_SPARK_DIR}/include" )
list( APPEND FO_CLIENT_LIBS "SPARK_Core" )
DisableLibWarnings( SPARK_Core )

# glslang & SPIRV-Cross
if( NOT FO_BUILD_ONLY_CLIENT )
	StatusMessage( "+ glslang" )
	set( FO_GLSLANG_DIR "ThirdParty/glslang" )
	set( SKIP_GLSLANG_INSTALL "ON" CACHE STRING "Forced by FOnline" FORCE )
	set( ENABLE_HLSL "OFF" CACHE STRING "Forced by FOnline" FORCE )
	set( ENABLE_GLSLANG_BINARIES "OFF" CACHE STRING "Forced by FOnline" FORCE )
	set( ENABLE_SPVREMAPPER "OFF" CACHE STRING "Forced by FOnline" FORCE )
	set( ENABLE_AMD_EXTENSIONS "OFF" CACHE STRING "Forced by FOnline" FORCE )
	set( ENABLE_NV_EXTENSIONS "OFF" CACHE STRING "Forced by FOnline" FORCE )
	if( EMSCRIPTEN )
		set( ENABLE_GLSLANG_WEB "ON" CACHE STRING "Forced by FOnline" FORCE )
		set( ENABLE_EMSCRIPTEN_SINGLE_FILE "ON" CACHE STRING "Forced by FOnline" FORCE )
	endif()
	add_subdirectory( "${FO_GLSLANG_DIR}" )
	include_directories( "${FO_GLSLANG_DIR}/glslang/Public" )
	include_directories( "${FO_GLSLANG_DIR}/SPIRV" )
	list( APPEND FO_EDITOR_LIBS "glslang" "OGLCompiler" "OSDependent" "SPIRV" )
	DisableLibWarnings( glslang OGLCompiler OSDependent SPIRV )

	StatusMessage( "+ SPIRV-Cross" )
	set( FO_SPIRV_CROSS_DIR "ThirdParty/SPIRV-Cross" )
	set( SPIRV_CROSS_EXCEPTIONS_TO_ASSERTIONS "OFF" CACHE STRING "Forced by FOnline" FORCE )
	set( SPIRV_CROSS_STATIC "ON" CACHE STRING "Forced by FOnline" FORCE )
	set( SPIRV_CROSS_SHARED "OFF" CACHE STRING "Forced by FOnline" FORCE )
	set( SPIRV_CROSS_CLI "OFF" CACHE STRING "Forced by FOnline" FORCE )
	set( SPIRV_CROSS_ENABLE_TESTS "OFF" CACHE STRING "Forced by FOnline" FORCE )
	set( SPIRV_CROSS_ENABLE_GLSL "ON" CACHE STRING "Forced by FOnline" FORCE )
	set( SPIRV_CROSS_ENABLE_HLSL "ON" CACHE STRING "Forced by FOnline" FORCE )
	set( SPIRV_CROSS_ENABLE_MSL "ON" CACHE STRING "Forced by FOnline" FORCE )
	set( SPIRV_CROSS_ENABLE_CPP "OFF" CACHE STRING "Forced by FOnline" FORCE )
	set( SPIRV_CROSS_ENABLE_REFLECT "OFF" CACHE STRING "Forced by FOnline" FORCE )
	set( SPIRV_CROSS_ENABLE_C_API "OFF" CACHE STRING "Forced by FOnline" FORCE )
	set( SPIRV_CROSS_ENABLE_UTIL "OFF" CACHE STRING "Forced by FOnline" FORCE )
	add_subdirectory( "${FO_SPIRV_CROSS_DIR}" )
	include_directories( "${FO_SPIRV_CROSS_DIR}/include" )
	list( APPEND FO_EDITOR_LIBS "spirv-cross-core" "spirv-cross-glsl" "spirv-cross-hlsl" "spirv-cross-msl" )
	DisableLibWarnings( spirv-cross-core spirv-cross-glsl spirv-cross-hlsl spirv-cross-msl )
endif()

# Rapid YAML
StatusMessage( "+ Rapid YAML" )
set( FO_RAPID_YAML_DIR "ThirdParty/rapidyaml" )
add_subdirectory( "${FO_RAPID_YAML_DIR}" )
include_directories( "${FO_RAPID_YAML_DIR}/src" )
list( APPEND FO_COMMON_LIBS "ryml" "c4core" )
DisableLibWarnings( ryml c4core )

# AngelScript Scripting
if( YES )
	# AngelScriptScripting
	#StatusMessage( "+ AngelScriptScripting" )
	#set( FO_ANGEL_SCRIPT_SCRIPTING_DIR "Source/Common/AngelScriptScripting" )
	#file( GLOB FO_ANGEL_SCRIPT_SCRIPTING_SOURCE "${FO_ANGEL_SCRIPT_SCRIPTING_DIR}/*.*" )
	#add_library( AngelScriptScripting ${FO_ANGEL_SCRIPT_SCRIPTING_SOURCE} )
	#list( APPEND FO_COMMON_LIBS "AngelScriptScripting" )

	# AngelScript
	StatusMessage( "+ AngelScript" )
	set( FO_ANGEL_SCRIPT_DIR "ThirdParty/AngelScript" )
	add_subdirectory( "${FO_ANGEL_SCRIPT_DIR}/sdk/angelscript/projects/cmake" )
	include_directories( "${FO_ANGEL_SCRIPT_DIR}/sdk/angelscript/include" "${FO_ANGEL_SCRIPT_DIR}/sdk/angelscript/source" "${FO_ANGEL_SCRIPT_DIR}/sdk/add_on" )
	list( APPEND FO_COMMON_LIBS "Angelscript" )
	DisableLibWarnings( Angelscript )

	# AngelScriptExt
	StatusMessage( "+ AngelScriptExt" )
	set( FO_ANGEL_SCRIPT_EXT_DIR "Source/Common/AngelScriptExt" )
	set( FO_ANGEL_SCRIPT_PREPROCESSOR_DIR "ThirdParty/AngelScript/preprocessor" )
	set( FO_ANGEL_SCRIPT_SDK_DIR "ThirdParty/AngelScript/sdk" )
	include_directories( "${FO_ANGEL_SCRIPT_EXT_DIR}" )
	include_directories( "${FO_ANGEL_SCRIPT_PREPROCESSOR_DIR}" )
	include_directories( "${FO_ANGEL_SCRIPT_SDK_DIR}/add_on/scriptstdstring" )
	include_directories( "${FO_ANGEL_SCRIPT_SDK_DIR}/add_on/scriptarray" )
	include_directories( "${FO_ANGEL_SCRIPT_SDK_DIR}/add_on/scriptdictionary" )
	include_directories( "${FO_ANGEL_SCRIPT_SDK_DIR}/add_on/scriptfile" )
	include_directories( "${FO_ANGEL_SCRIPT_SDK_DIR}/add_on/scriptany" )
	include_directories( "${FO_ANGEL_SCRIPT_SDK_DIR}/add_on/datetime" )
	include_directories( "${FO_ANGEL_SCRIPT_SDK_DIR}/add_on/scriptmath" )
	include_directories( "${FO_ANGEL_SCRIPT_SDK_DIR}/add_on/weakref" )
	include_directories( "${FO_ANGEL_SCRIPT_SDK_DIR}/add_on/scripthelper" )
	file( GLOB FO_ANGEL_SCRIPT_EXT_SOURCE
		"${FO_ANGEL_SCRIPT_EXT_DIR}/*.*"
		"${FO_ANGEL_SCRIPT_PREPROCESSOR_DIR}/*.*"
		"${FO_ANGEL_SCRIPT_SDK_DIR}/add_on/scriptstdstring/*.*"
		"${FO_ANGEL_SCRIPT_SDK_DIR}/add_on/scriptarray/*.*"
		"${FO_ANGEL_SCRIPT_SDK_DIR}/add_on/scriptdictionary/*.*"
		"${FO_ANGEL_SCRIPT_SDK_DIR}/add_on/scriptfile/*.*"
		"${FO_ANGEL_SCRIPT_SDK_DIR}/add_on/scriptany/*.*"
		"${FO_ANGEL_SCRIPT_SDK_DIR}/add_on/datetime/*.*"
		"${FO_ANGEL_SCRIPT_SDK_DIR}/add_on/scriptmath/*.*"
		"${FO_ANGEL_SCRIPT_SDK_DIR}/add_on/weakref/*.*"
		"${FO_ANGEL_SCRIPT_SDK_DIR}/add_on/scripthelper/*.*" )
	add_library( AngelscriptExt ${FO_ANGEL_SCRIPT_EXT_SOURCE} )
	list( APPEND FO_COMMON_LIBS "AngelscriptExt" )
	DisableLibWarnings( AngelscriptExt )
endif()

# Mono CSharp Scripting
if( YES )
	# MonoCSharpScripting
	#StatusMessage( "+ MonoCSharpScripting" )
	#set( FO_MONO_CSHARP_SCRIPTING_DIR "Source/Common/MonoCSharpScripting" )
	#file( GLOB FO_MONO_CSHARP_SCRIPTING_SOURCE "${FO_MONO_CSHARP_SCRIPTING_DIR}/*.*" )
	#add_library( MonoCSharpScripting ${FO_MONO_CSHARP_SCRIPTING_SOURCE} )
	#list( APPEND FO_COMMON_LIBS "MonoCSharpScripting" )

	# Mono
	StatusMessage( "+ Mono" )
	set( FO_MONO_DIR "ThirdParty/mono" )
	add_subdirectory( "${FO_MONO_DIR}" )
	include_directories( "${FO_MONO_DIR}" )
	include_directories( "${FO_MONO_DIR}/repo" )
	include_directories( "${FO_MONO_DIR}/repo/mono" )
	include_directories( "${FO_MONO_DIR}/repo/mono/eglib" )
	list( APPEND FO_COMMON_LIBS "libmono" )
	DisableLibWarnings( libmono )
endif()

# StarTrek Scripting
if( YES )
	# StarTrekScripting
	#StatusMessage( "+ StarTrekScripting" )
	#set( FO_STAR_TREK_SCRIPTING_DIR "Source/Common/StarTrekScripting" )
	#file( GLOB FO_STAR_TREK_SCRIPTING_SOURCE "${FO_STAR_TREK_SCRIPTING_DIR}/*.*" )
	#add_library( StarTrekScripting ${FO_STAR_TREK_SCRIPTING_SOURCE} )
	#list( APPEND FO_COMMON_LIBS "StarTrekScripting" )
endif()

# Common source
file( GLOB FO_COMMON_SOURCE "Source/Common/*.*" )

# Server source
file( GLOB FO_SERVER_SOURCE "Source/Server/*.*" )
set( FO_SERVER_SOURCE "${FO_COMMON_SOURCE};${FO_SERVER_SOURCE}" )

# Client source
file( GLOB FO_CLIENT_SOURCE "Source/Client/*.*" )
set( FO_CLIENT_SOURCE "${FO_COMMON_SOURCE};${FO_CLIENT_SOURCE}" )

# Editor source
file( GLOB FO_EDITOR_SOURCE "Source/Editor/*.*" )
set( FO_EDITOR_SOURCE "${FO_CLIENT_SOURCE};${FO_SERVER_SOURCE};${FO_EDITOR_SOURCE}" )
list( REMOVE_DUPLICATES FO_EDITOR_SOURCE )

# Applications
StatusMessage( "Applications:" )

if( NOT FONLINE_BUILD_ONLY_EDITOR AND NOT FONLINE_UNIT_TESTS AND NOT FONLINE_CODE_COVERAGE )
	if( NOT FO_BUILD_CLIENT_LIBRARY )
		StatusMessage( "+ FOnline" )
		list( APPEND FO_APPLICATIONS "FOnline" )
		add_executable( FOnline WIN32 ${FO_CLIENT_SOURCE} "Source/Applications/ClientApp.cpp" "Resources/Default.rc" )
		# Todo: Make bundles for Mac and maybe iOS
		# add_executable( FOnline MACOSX_BUNDLE ${FO_CLIENT_SOURCE} "Default.rc" )
		set_target_properties( FOnline PROPERTIES RUNTIME_OUTPUT_DIRECTORY ${FO_CLIENT_OUTPUT} RUNTIME_OUTPUT_DIRECTORY_DEBUG ${FO_CLIENT_OUTPUT}
			RUNTIME_OUTPUT_DIRECTORY_MINSIZEREL ${FO_CLIENT_OUTPUT} RUNTIME_OUTPUT_DIRECTORY_RELWITHDEBINFO ${FO_CLIENT_OUTPUT} RUNTIME_OUTPUT_DIRECTORY_RELEASE ${FO_CLIENT_OUTPUT} )
	else()
		StatusMessage( "+ FOnline (shared library)" )
		list( APPEND FO_APPLICATIONS "FOnline" )
		add_library( FOnline SHARED ${FO_CLIENT_SOURCE} "Source/Applications/ClientApp.cpp" )
		set_target_properties( FOnline PROPERTIES LIBRARY_OUTPUT_DIRECTORY ${FO_CLIENT_OUTPUT} )
	endif()
	set_target_properties( FOnline PROPERTIES OUTPUT_NAME "FOnline${FO_CLIENT_POSTFIX}" )
	set_target_properties( FOnline PROPERTIES COMPILE_DEFINITIONS "${FO_BUILD_DEFINES};FONLINE_CLIENT" )
	target_link_libraries( FOnline "${FO_COMMON_SYSTEM_LIBS}" "${FO_COMMON_LIBS}" "${FO_CLIENT_SYSTEM_LIBS}" "${FO_CLIENT_LIBS}" "${FO_RENDER_SYSTEM_LIBS}" "${FO_RENDER_LIBS}" "${CMAKE_DL_LIBS}" )
endif()

if( NOT FO_BUILD_ONLY_CLIENT AND NOT FONLINE_BUILD_ONLY_EDITOR AND NOT FONLINE_UNIT_TESTS AND NOT FONLINE_CODE_COVERAGE )
	StatusMessage( "+ FOnlineServer" )
	list( APPEND FO_APPLICATIONS "FOnlineServer" )
	add_executable( FOnlineServer WIN32 ${FO_SERVER_SOURCE} "Source/Applications/ServerApp.cpp" "Resources/Default.rc" )
	set_target_properties( FOnlineServer PROPERTIES RUNTIME_OUTPUT_DIRECTORY ${FO_SERVER_OUTPUT} RUNTIME_OUTPUT_DIRECTORY_DEBUG ${FO_SERVER_OUTPUT}
		RUNTIME_OUTPUT_DIRECTORY_MINSIZEREL ${FO_SERVER_OUTPUT} RUNTIME_OUTPUT_DIRECTORY_RELWITHDEBINFO ${FO_SERVER_OUTPUT} RUNTIME_OUTPUT_DIRECTORY_RELEASE ${FO_SERVER_OUTPUT} )
	set_target_properties( FOnlineServer PROPERTIES OUTPUT_NAME "FOnlineServer${FO_NON_CLIENT_POSTFIX}" )
	set_target_properties( FOnlineServer PROPERTIES COMPILE_DEFINITIONS "${FO_BUILD_DEFINES};FONLINE_SERVER" )
	target_link_libraries( FOnlineServer "${FO_COMMON_SYSTEM_LIBS}" "${FO_COMMON_LIBS}" "${FO_SERVER_SYSTEM_LIBS}" "${FO_SERVER_LIBS}" "${FO_RENDER_SYSTEM_LIBS}" "${FO_RENDER_LIBS}" "${CMAKE_DL_LIBS}" )

	if( WIN32 )
		StatusMessage( "+ FOnlineServerService" )
		list( APPEND FO_APPLICATIONS "FOnlineServerService" )
		add_executable( FOnlineServerService ${FO_SERVER_SOURCE} "Source/Applications/ServerServiceApp.cpp" )
		set_target_properties( FOnlineServerService PROPERTIES RUNTIME_OUTPUT_DIRECTORY ${FO_SERVER_OUTPUT} RUNTIME_OUTPUT_DIRECTORY_DEBUG ${FO_SERVER_OUTPUT}
			RUNTIME_OUTPUT_DIRECTORY_MINSIZEREL ${FO_SERVER_OUTPUT} RUNTIME_OUTPUT_DIRECTORY_RELWITHDEBINFO ${FO_SERVER_OUTPUT} RUNTIME_OUTPUT_DIRECTORY_RELEASE ${FO_SERVER_OUTPUT} )
		set_target_properties( FOnlineServerService PROPERTIES OUTPUT_NAME "FOnlineServerService${FO_NON_CLIENT_POSTFIX}" )
		set_target_properties( FOnlineServerService PROPERTIES COMPILE_DEFINITIONS "${FO_BUILD_DEFINES};FONLINE_SERVER;FO_SERVER_NO_GUI" )
		target_link_libraries( FOnlineServerService "${FO_COMMON_SYSTEM_LIBS}" "${FO_COMMON_LIBS}" "${FO_SERVER_SYSTEM_LIBS}" "${FO_SERVER_LIBS}" "${CMAKE_DL_LIBS}" )
	else()
		StatusMessage( "+ FOnlineServerDaemon" )
		list( APPEND FO_APPLICATIONS "FOnlineServerDaemon" )
		add_executable( FOnlineServerDaemon ${FO_SERVER_SOURCE} "Source/Applications/ServerDaemonApp.cpp" )
		set_target_properties( FOnlineServerDaemon PROPERTIES RUNTIME_OUTPUT_DIRECTORY ${FO_SERVER_OUTPUT} RUNTIME_OUTPUT_DIRECTORY_DEBUG ${FO_SERVER_OUTPUT}
			RUNTIME_OUTPUT_DIRECTORY_MINSIZEREL ${FO_SERVER_OUTPUT} RUNTIME_OUTPUT_DIRECTORY_RELWITHDEBINFO ${FO_SERVER_OUTPUT} RUNTIME_OUTPUT_DIRECTORY_RELEASE ${FO_SERVER_OUTPUT} )
		set_target_properties( FOnlineServerDaemon PROPERTIES OUTPUT_NAME "FOnlineServerDaemon${FO_NON_CLIENT_POSTFIX}" )
		set_target_properties( FOnlineServerDaemon PROPERTIES COMPILE_DEFINITIONS "${FO_BUILD_DEFINES};FONLINE_SERVER;FO_SERVER_NO_GUI" )
		target_link_libraries( FOnlineServerDaemon "${FO_COMMON_SYSTEM_LIBS}" "${FO_COMMON_LIBS}" "${FO_SERVER_SYSTEM_LIBS}" "${FO_SERVER_LIBS}" "${CMAKE_DL_LIBS}" )
	endif()
endif()

if( FONLINE_UNIT_TESTS AND NOT FO_BUILD_ONLY_CLIENT AND NOT FONLINE_BUILD_ONLY_EDITOR )
	StatusMessage( "+ FOnlineUnitTests" )
	list( APPEND FO_APPLICATIONS "FOnlineUnitTests" )
	add_executable( FOnlineUnitTests ${FO_EDITOR_SOURCE} "Source/Applications/ServerApp.cpp" "Source/Applications/ServerServiceApp.cpp" "Source/Applications/ServerDaemonApp.cpp" "Source/Applications/ClientApp.cpp" "Source/Applications/EditorApp.cpp" )
	set_target_properties( FOnlineUnitTests PROPERTIES RUNTIME_OUTPUT_DIRECTORY ${FO_TESTS_OUTPUT} RUNTIME_OUTPUT_DIRECTORY_DEBUG ${FO_TESTS_OUTPUT}
		RUNTIME_OUTPUT_DIRECTORY_MINSIZEREL ${FO_TESTS_OUTPUT} RUNTIME_OUTPUT_DIRECTORY_RELWITHDEBINFO ${FO_TESTS_OUTPUT} RUNTIME_OUTPUT_DIRECTORY_RELEASE ${FO_EDITOR_OUTPUT} )
	set_target_properties( FOnlineUnitTests PROPERTIES OUTPUT_NAME "FOnlineUnitTests${FO_NON_CLIENT_POSTFIX}" )
	set_target_properties( FOnlineUnitTests PROPERTIES COMPILE_DEFINITIONS "${FO_BUILD_DEFINES};FONLINE_EDITOR;FO_TESTING" )
	target_link_libraries( FOnlineUnitTests "${FO_COMMON_SYSTEM_LIBS}" "${FO_COMMON_LIBS}" "${FO_EDITOR_SYSTEM_LIBS}" "${FO_EDITOR_LIBS}" "${FO_SERVER_SYSTEM_LIBS}" "${FO_SERVER_LIBS}" "${FO_CLIENT_SYSTEM_LIBS}" "${FO_CLIENT_LIBS}" "${FO_RENDER_SYSTEM_LIBS}" "${FO_RENDER_LIBS}" "${CMAKE_DL_LIBS}" )
endif()

if( FONLINE_CODE_COVERAGE AND NOT FO_BUILD_ONLY_CLIENT AND NOT FONLINE_BUILD_ONLY_EDITOR )
	StatusMessage( "+ FOnlineCodeCoverage" )
	list( APPEND FO_APPLICATIONS "FOnlineCodeCoverage" )
	add_executable( FOnlineCodeCoverage ${FO_EDITOR_SOURCE} "Source/Applications/ServerApp.cpp" "Source/Applications/ServerServiceApp.cpp" "Source/Applications/ServerDaemonApp.cpp" "Source/Applications/ClientApp.cpp" "Source/Applications/EditorApp.cpp" )
	set_target_properties( FOnlineCodeCoverage PROPERTIES RUNTIME_OUTPUT_DIRECTORY ${FO_TESTS_OUTPUT} RUNTIME_OUTPUT_DIRECTORY_DEBUG ${FO_TESTS_OUTPUT}
		RUNTIME_OUTPUT_DIRECTORY_MINSIZEREL ${FO_TESTS_OUTPUT} RUNTIME_OUTPUT_DIRECTORY_RELWITHDEBINFO ${FO_TESTS_OUTPUT} RUNTIME_OUTPUT_DIRECTORY_RELEASE ${FO_EDITOR_OUTPUT} )
	set_target_properties( FOnlineCodeCoverage PROPERTIES OUTPUT_NAME "FOnlineCodeCoverage${FO_NON_CLIENT_POSTFIX}" )
	set_target_properties( FOnlineCodeCoverage PROPERTIES COMPILE_DEFINITIONS "${FO_BUILD_DEFINES};FONLINE_EDITOR;FO_TESTING" )
	target_compile_options( FOnlineCodeCoverage PRIVATE "-O0;-fprofile-arcs;-ftest-coverage" )
	set_target_properties( FOnlineCodeCoverage PROPERTIES LINK_FLAGS "--coverage" )
	target_link_libraries( FOnlineCodeCoverage "gcov" "${FO_COMMON_SYSTEM_LIBS}" "${FO_COMMON_LIBS}" "${FO_EDITOR_SYSTEM_LIBS}" "${FO_EDITOR_LIBS}" "${FO_SERVER_SYSTEM_LIBS}" "${FO_SERVER_LIBS}" "${FO_CLIENT_SYSTEM_LIBS}" "${FO_CLIENT_LIBS}" "${FO_RENDER_SYSTEM_LIBS}" "${FO_RENDER_LIBS}" "${CMAKE_DL_LIBS}" )
endif()

if( FONLINE_BUILD_ONLY_EDITOR OR ( NOT FO_BUILD_ONLY_CLIENT AND NOT FONLINE_UNIT_TESTS AND NOT FONLINE_CODE_COVERAGE ) )
	StatusMessage( "+ FOnlineEditor" )
	list( APPEND FO_APPLICATIONS "FOnlineEditor" )
	add_executable( FOnlineEditor WIN32 ${FO_EDITOR_SOURCE} "Source/Applications/EditorApp.cpp" "Resources/Default.rc" )
	set_target_properties( FOnlineEditor PROPERTIES RUNTIME_OUTPUT_DIRECTORY ${FO_EDITOR_OUTPUT} RUNTIME_OUTPUT_DIRECTORY_DEBUG ${FO_EDITOR_OUTPUT}
		RUNTIME_OUTPUT_DIRECTORY_MINSIZEREL ${FO_EDITOR_OUTPUT} RUNTIME_OUTPUT_DIRECTORY_RELWITHDEBINFO ${FO_EDITOR_OUTPUT} RUNTIME_OUTPUT_DIRECTORY_RELEASE ${FO_EDITOR_OUTPUT} )
	set_target_properties( FOnlineEditor PROPERTIES OUTPUT_NAME "FOnlineEditor${FO_NON_CLIENT_POSTFIX}" )
	set_target_properties( FOnlineEditor PROPERTIES COMPILE_DEFINITIONS "${FO_BUILD_DEFINES};FONLINE_EDITOR" )
	target_link_libraries( FOnlineEditor "${FO_COMMON_SYSTEM_LIBS}" "${FO_COMMON_LIBS}" "${FO_EDITOR_SYSTEM_LIBS}" "${FO_EDITOR_LIBS}" "${FO_SERVER_SYSTEM_LIBS}" "${FO_SERVER_LIBS}" "${FO_CLIENT_SYSTEM_LIBS}" "${FO_CLIENT_LIBS}" "${FO_RENDER_SYSTEM_LIBS}" "${FO_RENDER_LIBS}" "${CMAKE_DL_LIBS}" )
endif()

if( NOT FO_BUILD_ONLY_CLIENT )
	set_property( GLOBAL PROPERTY USE_FOLDERS ON )
	set_property( TARGET ${FO_APPLICATIONS} PROPERTY FOLDER "Binaries" )
	set_property( TARGET ${FO_COMMON_LIBS} ${FO_EDITOR_LIBS} ${FO_SERVER_LIBS} ${FO_CLIENT_LIBS} ${FO_RENDER_LIBS} PROPERTY FOLDER "Libraries" )
endif()

# Print cached variables
if( FONLINE_VERBOSE_BUILD )
	get_cmake_property( FO_CACHE_VARIABLES CACHE_VARIABLES )
	list( SORT FO_CACHE_VARIABLES )

	StatusMessage( "Forced variables:" )
	foreach( varName ${FO_CACHE_VARIABLES} )
		get_property( str CACHE ${varName} PROPERTY HELPSTRING )
		get_property( type CACHE ${varName} PROPERTY TYPE )
		string( FIND "${str}" "Forced by FOnline" forced )
		if( NOT "${forced}" STREQUAL "-1" )
			StatusMessage( "- ${varName}: '${${varName}}' type: '${type}'" )
		endif()
	endforeach()

	StatusMessage( "Default variables:" )
	foreach( varName ${FO_CACHE_VARIABLES} )
		get_property( str CACHE ${varName} PROPERTY HELPSTRING )
		get_property( type CACHE ${varName} PROPERTY TYPE )
		string( FIND "${str}" "Forced by FOnline" forced )
		if( "${forced}" STREQUAL "-1" AND NOT "${type}" STREQUAL "INTERNAL" AND NOT "${type}" STREQUAL "STATIC" AND NOT "${type}" STREQUAL "UNINITIALIZED" )
			StatusMessage( "- ${varName}: '${${varName}}' docstring: '${str}' type: '${type}'" )
		endif()
	endforeach()
endif()
