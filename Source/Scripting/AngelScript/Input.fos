// FOS Client

funcdef bool KeyDownCallback(uint8 key, string text);
funcdef void KeyUpCallback(uint8 key);

bool[] KeyPressed = {};
bool[] MousePressed = {};

KeyDownCallback[] KeyDownCallbacks = {};
KeyUpCallback[] KeyUpCallbacks = {};

void AddKeyDownCallback(KeyDownCallback callback)
{
    KeyDownCallbacks.insertLast(callback);
}
void AddKeyUpCallback(KeyUpCallback callback)
{
    KeyUpCallbacks.insertLast(callback);
}

// Export
bool IsKeyPressed(uint8 key)
{
    return KeyPressed[key];
}
bool IsMousePressed(int button)
{
    return MousePressed[button];
}
bool IsCtrlDown()
{
    return KeyPressed[DIK_RCONTROL] || KeyPressed[DIK_LCONTROL];
}
bool IsAltDown()
{
    return KeyPressed[DIK_LMENU] || KeyPressed[DIK_RMENU];
}
bool IsShiftDown()
{
    return KeyPressed[DIK_LSHIFT] || KeyPressed[DIK_RSHIFT];
}

bool[] GetKeyPressed()
{
    return KeyPressed;
}
bool[] GetMousePressed()
{
    return MousePressed;
}

void ModuleInit()
{
    GameInstance.OnMouseDown.Subscribe(OnMouseDown);
    GameInstance.OnMouseUp.Subscribe(OnMouseUp);
    GameInstance.OnMouseMove.Subscribe(OnMouseMove);
    GameInstance.OnKeyDown.Subscribe(OnKeyDown);
    GameInstance.OnKeyUp.Subscribe(OnKeyUp);
    GameInstance.OnInputLost.Subscribe(OnInputLost);

    KeyPressed.resize(0x100);
    MousePressed.resize(MOUSE_BUTTON_EXT4 + 1);
}

void ReleaseKeys()
{
    for (uint i = 0; i < KeyPressed.length(); i++)
        if (KeyPressed[i])
            OnKeyUp(i);
}

void ReleaseMouse()
{
    for (uint i = 0; i < MousePressed.length(); i++)
        if (MousePressed[i])
            OnMouseUp(i);
}

// //////////////////////////////////////////////////////////////////////////////////////////////////
// Mouse behaviours. Button states look in ClientCore.fos, Mouse buttons.
// Return true to disable engine events.
void OnMouseDown(int button) // Engine callback
{
    if (Settings.WaitPing || Settings.IsConnecting || Settings.IsUpdating)
        return;

    MousePressed[button] = true;

    Gui::EngineCallback_MouseDown(button);
}

void OnMouseUp(int button) // Engine callback
{
    if (MousePressed[button])
        Gui::EngineCallback_MouseUp(button);

    MousePressed[button] = false;
}

void OnMouseMove(int offsetX, int offsetY) // Engine callback
{
    Gui::EngineCallback_MouseMove(offsetX, offsetY);
}

// //////////////////////////////////////////////////////////////////////////////////////////////////
// Keyboard behaviours. Key codes look in ClientCore.fos, DirectInput keyboard scan codes.
// Return true to disable engine events.
void OnKeyDown(uint8 key, string text) // Engine callback
{
    // Avoid repeating
    if (KeyPressed[key]) {
        if (key != DIK_TEXT && key != DIK_SPACE && key != DIK_BACK && key != DIK_DELETE && key != DIK_LEFT && key != DIK_RIGHT)
            return;
    }
    KeyPressed[key] = true;

    // Handlers
    bool handled = false;
    for (uint i = 0; !handled && i < KeyDownCallbacks.length(); i++)
        handled = KeyDownCallbacks[i](key, text);
    if (!handled)
        Gui::EngineCallback_KeyDown(key, text);
}

void OnKeyUp(uint8 key) // Engine callback
{
    // Avoid repeating
    if (!KeyPressed[key])
        return;
    KeyPressed[key] = false;

    // Handlers
    for (uint i = 0; i < KeyUpCallbacks.length(); i++)
        KeyUpCallbacks[i](key);
    Gui::EngineCallback_KeyUp(key);
}

// //////////////////////////////////////////////////////////////////////////////////////////////////
// Called on mouse/keyboard input lost (alt-tab, minimize, lost focus).
void OnInputLost() // Engine callback
{
    // Reset states
    ReleaseKeys();
    ReleaseMouse();

    // Gui:: handler
    Gui::EngineCallback_InputLost();
}
