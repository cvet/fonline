// FOS Client

funcdef bool KeyDownCallback(KeyCode key, string text);
funcdef void KeyUpCallback(KeyCode key);

bool[] KeyPressed = {};
bool[] MousePressed = {};

KeyDownCallback[] KeyDownCallbacks = {};
KeyUpCallback[] KeyUpCallbacks = {};

void AddKeyDownCallback(KeyDownCallback callback)
{
    KeyDownCallbacks.insertLast(callback);
}
void AddKeyUpCallback(KeyUpCallback callback)
{
    KeyUpCallbacks.insertLast(callback);
}

bool IsKeyPressed(KeyCode key)
{
    return KeyPressed[key];
}
bool IsMousePressed(MouseButton button)
{
    return MousePressed[button];
}
bool IsCtrlDown()
{
    return KeyPressed[KeyCode::Rcontrol] || KeyPressed[KeyCode::Lcontrol];
}
bool IsAltDown()
{
    return KeyPressed[KeyCode::Lmenu] || KeyPressed[KeyCode::Rmenu];
}
bool IsShiftDown()
{
    return KeyPressed[KeyCode::Lshift] || KeyPressed[KeyCode::Rshift];
}

bool[] GetKeyPressed()
{
    return KeyPressed;
}
bool[] GetMousePressed()
{
    return MousePressed;
}

void ModuleInit()
{
    Game.OnMouseDown.Subscribe(OnMouseDown);
    Game.OnMouseUp.Subscribe(OnMouseUp);
    Game.OnMouseMove.Subscribe(OnMouseMove);
    Game.OnKeyDown.Subscribe(OnKeyDown);
    Game.OnKeyUp.Subscribe(OnKeyUp);
    Game.OnInputLost.Subscribe(OnInputLost);

    KeyPressed.resize(0x100);
    MousePressed.resize(MouseButton::Ext4 + 1);
}

void ReleaseKeys()
{
    for (uint i = 0; i < KeyPressed.length(); i++) {
        if (KeyPressed[i]) {
            OnKeyUp(KeyCode(i));
        }
    }
}

void ReleaseMouse()
{
    for (uint i = 0; i < MousePressed.length(); i++) {
        if (MousePressed[i]) {
            OnMouseUp(MouseButton(i));
        }
    }
}

// //////////////////////////////////////////////////////////////////////////////////////////////////
// Mouse behaviours. Button states look in ClientCore.fos, Mouse buttons.
// Return true to disable engine events.
void OnMouseDown(MouseButton button) // Engine callback
{
    if (Game.IsConnecting()) {
        return;
    }

    MousePressed[button] = true;

    Gui::EngineCallback_MouseDown(button);
}

void OnMouseUp(MouseButton button) // Engine callback
{
    if (MousePressed[button]) {
        Gui::EngineCallback_MouseUp(button);
    }

    MousePressed[button] = false;
}

void OnMouseMove(int offsetX, int offsetY) // Engine callback
{
    Gui::EngineCallback_MouseMove(offsetX, offsetY);
}

// //////////////////////////////////////////////////////////////////////////////////////////////////
// Keyboard behaviours. Key codes look in ClientCore.fos, DirectInput keyboard scan codes.
// Return true to disable engine events.
void OnKeyDown(KeyCode key, string text) // Engine callback
{
    // Avoid repeating
    if (KeyPressed[key]) {
        if (key != KeyCode::Text && key != KeyCode::Space && key != KeyCode::Back && key != KeyCode::Delete && key != KeyCode::Left && key != KeyCode::Right) {
            return;
        }
    }
    KeyPressed[key] = true;

    // Handlers
    bool handled = false;
    for (uint i = 0; !handled && i < KeyDownCallbacks.length(); i++) {
        handled = KeyDownCallbacks[i](key, text);
    }
    if (!handled) {
        Gui::EngineCallback_KeyDown(key, text);
    }
}

void OnKeyUp(KeyCode key) // Engine callback
{
    // Avoid repeating
    if (!KeyPressed[key]) {
        return;
    }
    KeyPressed[key] = false;

    // Handlers
    for (uint i = 0; i < KeyUpCallbacks.length(); i++) {
        KeyUpCallbacks[i](key);
    }
    Gui::EngineCallback_KeyUp(key);
}

// //////////////////////////////////////////////////////////////////////////////////////////////////
// Called on mouse/keyboard input lost (alt-tab, minimize, lost focus).
void OnInputLost() // Engine callback
{
    // Reset states
    ReleaseKeys();
    ReleaseMouse();

    // Gui:: handler
    Gui::EngineCallback_InputLost();
}
