namespace Sprite
{

///@ Enum SpriteLayout None
///@ Enum SpriteLayout Tile
///@ Enum SpriteLayout Center
///@ Enum SpriteLayout Stretch
///@ Enum SpriteLayout Zoom

#if CLIENT

class Sprite
{
    Sprite()
    {
        // Empty
    }

    Sprite(string name)
    {
        bool ok = Load(name);
        Assert(ok, name);
    }

    Sprite(hstring name)
    {
        bool ok = Load(name);
        Assert(ok, name);
    }

    ~Sprite()
    {
        Unload();
    }

    bool Load(string name)
    {
        return Load(hstring(name));
    }

    bool Load(hstring name)
    {
        if (name == LoadedName) {
            return true;
        }

        Unload();
        LoadedName = name;
        Id = LoadedName != EMPTY_HSTRING ? Game.LoadSprite(LoadedName) : 0;
        RefreshData();
        return Id != 0;
    }

    void Unload()
    {
        if (Id != 0) {
            Game.FreeSprite(Id);
        }
        Id = 0;
        RefreshData();
    }

    // alignX/Y = -1 left / top, 0 center, 1 right / bottom
    void Draw(int x, int y, int width = 0, int height = 0, int alignX = -1, int alignY = -1, SpriteLayout layout = SpriteLayout::None,
              ucolor color = ZERO_UCOLOR)
    {
        if (Id == 0 || Hidden) {
            return;
        }

        if (width == 0) {
            width = Width;
        }
        if (height == 0) {
            height = Height;
        }

        if (alignX == 0) {
            x -= width / 2;
        }
        else if (alignX == 1) {
            x -= width;
        }
        if (alignY == 0) {
            y -= height / 2;
        }
        else if (alignY == 1) {
            y -= height;
        }

        if (color == ZERO_UCOLOR) {
            color = Color;
        }

        switch (layout != SpriteLayout::None ? layout : Layout) {
        case SpriteLayout::Tile:
            Game.DrawSpritePattern(Id, x, y, width, height, Width, Height, color);
            break;
        case SpriteLayout::Center:
            Game.DrawSprite(Id, x + width / 2 - Width / 2, y + height / 2 - Height / 2, color, false);
            break;
        case SpriteLayout::Stretch:
            Game.DrawSprite(Id, x, y, width, height, color, false, false);
            break;
        case SpriteLayout::Zoom:
            Game.DrawSprite(Id, x, y, width, height, color, true, false);
            break;
        default:
            Game.DrawSprite(Id, x, y, color, false);
            break;
        }
    }

    void SetFirstFrame()
    {
        Game.StopSprite(Id);
        Game.SetSpriteTime(Id, 0.0);
    }

    void SetLastFrame()
    {
        Game.StopSprite(Id);
        Game.SetSpriteTime(Id, 1.0);
    }

    void SetFrame(float normalizedTime)
    {
        Game.StopSprite(Id);
        Game.SetSpriteTime(Id, normalizedTime);
    }

    void Play(bool loop = true, bool reverse = false)
    {
        if (Id == 0) {
            return;
        }

        Game.PlaySprite(Id, EMPTY_HSTRING, loop, reverse);
    }

    void Play(string animName, bool loop = true, bool reverse = false)
    {
        if (Id == 0) {
            return;
        }

        Game.PlaySprite(Id, hstring(animName), loop, reverse);
    }

    void Play(hstring animName, bool loop = true, bool reverse = false)
    {
        if (Id == 0) {
            return;
        }

        Game.PlaySprite(Id, animName, loop, reverse);
    }

    private
    void RefreshData()
    {
        if (Id != 0) {
            Width = Game.GetSpriteWidth(Id);
            Height = Game.GetSpriteHeight(Id);
        }
        else {
            Width = 0;
            Height = 0;
        }
    }

    uint Id = 0;
    SpriteLayout Layout = SpriteLayout::None;
    int Width = 0;
    int Height = 0;
    uint Ticks = 0;
    bool Hidden = false;
    hstring LoadedName;
    ucolor Color = COLOR_NEUTRAL;
};

#endif

}
