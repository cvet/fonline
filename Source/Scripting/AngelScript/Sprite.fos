// FOS Client Mapper

class Sprite
{
    Sprite()
    {
        // Empty
    }

    Sprite(string name)
    {
        bool ok = Load(name);
        Assert(ok, name);
    }

    Sprite(hstring name)
    {
        bool ok = Load(name);
        Assert(ok, name);
    }

    ~Sprite()
    {
        Unload();
    }

    bool Load(string name)
    {
        return Load(hstring(name));
    }

    bool Load(hstring name)
    {
        if (name == LoadedName)
            return true;

        Unload();
        LoadedName = name;
        Id = LoadedName != hstring() ? Game.LoadSprite(LoadedName) : 0;
        RefreshData();
        return Id != 0;
    }

    void Unload()
    {
        if (Id != 0)
            Game.FreeSprite(Id);
        Id = 0;
        RefreshData();
    }

    // cornerX/Y = -1 left / top, 0 center, 1 right / bottom
    void Draw(int x, int y, int w = 0, int h = 0, int cornerX = -1, int cornerY = -1, int layout = -1, uint color = 0)
    {
        if (Id == 0 || Hidden)
            return;

        if (w == 0)
            w = Width;
        if (h == 0)
            h = Height;

        if (AnimPlay) {
            uint ticksPerFrame = Ticks / FrmCount;
            int framesPassed = (Game.GetTick() - AnimStartTick) / ticksPerFrame;
            if (framesPassed > 0) {
                AnimStartTick += framesPassed * ticksPerFrame;
                Frame += (AnimReverse ? -framesPassed : framesPassed);

                bool endAnim = false;
                if (Frame <= 0) {
                    endAnim = true;
                    AnimStartTick -= -Frame * ticksPerFrame;
                    Frame = 0;
                }
                else if (Frame >= int(FrmCount) - 1) {
                    endAnim = true;
                    AnimStartTick -= (Frame + 1 - FrmCount) * ticksPerFrame;
                    Frame = FrmCount - 1;
                }

                if (endAnim) {
                    if (AnimLoop)
                        Frame = (AnimReverse ? int(FrmCount) - 1 : 0);
                    else
                        AnimPlay = false;
                }
            }
        }

        if (cornerX == 0)
            x -= w / 2;
        else if (cornerX == 1)
            x -= w;
        if (cornerY == 0)
            y -= h / 2;
        else if (cornerY == 1)
            y -= h;

        switch (layout != -1 ? layout : Layout) {
        case IMAGE_LAYOUT_TILE:
            Game.DrawSpritePattern(Id, Frame, x, y, w, h, Width, Height, color);
            break;
        case IMAGE_LAYOUT_CENTER:
            Game.DrawSprite(Id, Frame, x + w / 2 - Width / 2, y + h / 2 - Height / 2, color, false);
            break;
        case IMAGE_LAYOUT_STRETCH:
            Game.DrawSprite(Id, Frame, x, y, w, h, false, color, false);
            break;
        case IMAGE_LAYOUT_ZOOM:
            Game.DrawSprite(Id, Frame, x, y, w, h, true, color, false);
            break;
        default:
            Game.DrawSprite(Id, Frame, x, y, color, false);
            break;
        }
    }

    void SetFrame(int index)
    {
        Frame = index;
        AnimPlay = false;
    }

    void SetFirstFrame()
    {
        SetFrame(0);
    }

    void SetLastFrame()
    {
        SetFrame(int(FrmCount) - 1);
    }

    void PlayAnimation(bool loop = true, bool reverse = false)
    {
        if (Id == 0)
            return;
        if (AnimPlay && AnimLoop == loop && AnimReverse == reverse)
            return;

        AnimPlay = true;
        AnimLoop = loop;
        AnimReverse = reverse;
        AnimStartTick = Game.GetTick();
    }

    private
    void RefreshData()
    {
        if (Id != 0) {
            Width = Game.GetSpriteWidth(Id, 0);
            Height = Game.GetSpriteHeight(Id, 0);
            FrmCount = Game.GetSpriteCount(Id);
            Ticks = Game.GetSpriteTicks(Id);
        }
        else {
            Width = 0;
            Height = 0;
            FrmCount = 0;
            Ticks = 0;
        }
    }

    uint Id;
    int Frame = -1;
    int Layout = IMAGE_LAYOUT_NONE;
    int Width;
    int Height;
    uint FrmCount;
    uint Ticks;
    bool AnimPlay;
    bool AnimLoop;
    bool AnimReverse;
    uint AnimStartTick;
    bool Hidden;
    hstring LoadedName;
};
