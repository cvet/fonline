// FOS Server
// Author: Atom

// utilities for tracing
// pathfinding/critter-gathering functions etc.

interface ITraceContext
{
    void StartExec(Map map, uint16 hx, uint16 hy, uint16 tx, uint16 ty, uint maxDist);
    void FinishExec(Map map, uint resultDist);
    bool Exec(Map map, uint16 hx, uint16 hy); // Return true to stop tracing
};

// math
const float SQRT3T2_FLOAT = 3.4641016151f;
const float SQRT3_FLOAT = 1.732050807568877f;
const float BIAS_FLOAT = 0.02f;
const float RAD2DEG = 57.29577951f;

float GetDirectionF(uint16 hx, uint16 hy, uint16 tx, uint16 ty)
{
    float nx = 3 * (float(tx) - float(hx));
    float ny = SQRT3T2_FLOAT * (float(ty) - float(hy)) - (float(tx % 2) - float(hx % 2)) * SQRT3_FLOAT;
    return 180.0f + RAD2DEG * math::atan2(ny, nx); // In degrees, because cvet loves the degrees
}

uint LineTracerHex(uint16 hx, uint16 hy, uint16 tx, uint16 ty, Map map, uint dist, ITraceContext context)
{
    if (dist == 0)
        dist = Game.GetDistance(hx, hy, tx, ty);

    context.StartExec(map, hx, hy, tx, ty, dist);

    float dir = GetDirectionF(hx, hy, tx, ty);
    uint8 dir1, dir2;
    if ((30.0f <= dir) && (dir < 90.0f)) {
        dir1 = 5;
        dir2 = 0;
    }
    else if ((90.0f <= dir) && (dir < 150.0f)) {
        dir1 = 4;
        dir2 = 5;
    }
    else if ((150.0f <= dir) && (dir < 210.0f)) {
        dir1 = 3;
        dir2 = 4;
    }
    else if ((210.0f <= dir) && (dir < 270.0f)) {
        dir1 = 2;
        dir2 = 3;
    }
    else if ((270.0f <= dir) && (dir < 330.0f)) {
        dir1 = 1;
        dir2 = 2;
    }
    else {
        dir1 = 0;
        dir2 = 1;
    }

    uint16 cx = hx;
    uint16 cy = hy;
    uint16 px = hx;
    uint16 py = hy;

    uint16 t1x, t1y, t2x, t2y;

    float x1 = 3 * float(hx) + BIAS_FLOAT;
    float y1 = SQRT3T2_FLOAT * float(hy) - (float(hx % 2)) * SQRT3_FLOAT + BIAS_FLOAT;

    float x2 = 3 * float(tx) + BIAS_FLOAT;
    float y2 = SQRT3T2_FLOAT * float(ty) - (float(tx % 2)) * SQRT3_FLOAT + BIAS_FLOAT;

    float dx = x2 - x1;
    float dy = y2 - y1;

    float c1x, c1y, c2x, c2y; // test hex
    float dist1, dist2;

    for (uint i = 1; i <= dist; i++) {
        t1x = cx;
        t2x = cx;
        t1y = cy;
        t2y = cy;
        map.MoveHexByDir(t1x, t1y, dir1, 1);
        map.MoveHexByDir(t2x, t2y, dir2, 1);
        c1x = 3 * float(t1x);
        c1y = SQRT3T2_FLOAT * float(t1y) - (float(t1x % 2)) * SQRT3_FLOAT;
        c2x = 3 * float(t2x);
        c2y = SQRT3T2_FLOAT * float(t2y) - (float(t2x % 2)) * SQRT3_FLOAT;
        dist1 = dx * (y1 - c1y) - dy * (x1 - c1x);
        dist2 = dx * (y1 - c2y) - dy * (x1 - c2x);
        dist1 = ((dist1 > 0) ? dist1 : -dist1);
        dist2 = ((dist2 > 0) ? dist2 : -dist2);
        if (dist1 <= dist2) {
            cx = t1x;
            cy = t1y;
        } // left hand biased
        else {
            cx = t2x;
            cy = t2y;
        }

        // if MoveHexByDir tried to leave the map and failed:
        if (cx == px && cy == py) {
            dist = i - 1;
            break;
        }

        px = cx;
        py = cy;

        if (context.Exec(map, cx, cy)) {
            dist = i;
            break;
        }
    }

    context.FinishExec(map, dist);
    return dist;
}

uint LineTracerSquare(uint16 hx, uint16 hy, uint16 tx, uint16 ty, Map map, uint dist, ITraceContext context)
{
    context.StartExec(map, hx, hy, tx, ty, dist);

    float dir = math::atan2(float(ty - hy), float(tx - hx));
    float dx = math::cos(dir);
    float dy = math::sin(dir);
    if (math::abs(dx) > math::abs(dy)) {
        dy /= math::abs(dx);
        dx = (dx > 0 ? 1.0f : -1.0f);
    }
    else {
        dx /= math::abs(dy);
        dy = (dy > 0 ? 1.0f : -1.0f);
    }
    float x1 = float(hx) + 0.5f;
    float y1 = float(hy) + 0.5f;
    uint16 maxx = map.Width;
    uint16 maxy = map.Height;
    uint16 cx = 0, cy = 0;

    for (uint i = 1; i <= dist; i++) {
        x1 += dx;
        y1 += dy;
        cx = uint16(math::floor(x1));
        cy = uint16(math::floor(y1));
        if (cx >= maxx || cy >= maxy) {
            dist = i - 1;
            break;
        }
        if (context.Exec(map, cx, cy)) {
            dist = i;
            break;
        }
    }

    context.FinishExec(map, dist);
    return dist;
}
