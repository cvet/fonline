namespace LineTracer
{

// Author: Atom

// utilities for tracing
// pathfinding/critter-gathering functions etc.

interface ITraceContext
{
    void StartExec(Map map, mpos fromHex, mpos toHex, uint maxDist);
    void FinishExec(Map map, uint resultDist);
    bool Exec(Map map, mpos hex); // Return true to stop tracing
};

// math
const float SQRT3T2_FLOAT = 3.4641016151f;
const float SQRT3_FLOAT = 1.732050807568877f;
const float BIAS_FLOAT = 0.02f;
const float RAD2DEG = 57.29577951f;

float GetDirectionF(mpos fromHex, mpos toHex)
{
    float nx = 3 * (float(toHex.x) - float(fromHex.x));
    float ny = SQRT3T2_FLOAT * (float(toHex.y) - float(fromHex.y)) - (float(toHex.x % 2) - float(fromHex.x % 2)) * SQRT3_FLOAT;

    return 180.0f + RAD2DEG * math::atan2(ny, nx); // In degrees, because cvet loves the degrees
}

uint LineTracerHex(mpos fromHex, mpos toHex, Map map, uint dist, ITraceContext context)
{
    if (dist == 0) {
        dist = Game.GetDistance(fromHex, toHex);
    }

    context.StartExec(map, fromHex, toHex, dist);

    float dir = GetDirectionF(fromHex, toHex);
    uint8 dir1, dir2;

    if ((30.0f <= dir) && (dir < 90.0f)) {
        dir1 = 5;
        dir2 = 0;
    }
    else if ((90.0f <= dir) && (dir < 150.0f)) {
        dir1 = 4;
        dir2 = 5;
    }
    else if ((150.0f <= dir) && (dir < 210.0f)) {
        dir1 = 3;
        dir2 = 4;
    }
    else if ((210.0f <= dir) && (dir < 270.0f)) {
        dir1 = 2;
        dir2 = 3;
    }
    else if ((270.0f <= dir) && (dir < 330.0f)) {
        dir1 = 1;
        dir2 = 2;
    }
    else {
        dir1 = 0;
        dir2 = 1;
    }

    mpos chex = fromHex;
    mpos phex = fromHex;

    float x1 = 3 * float(fromHex.x) + BIAS_FLOAT;
    float y1 = SQRT3T2_FLOAT * float(fromHex.y) - (float(fromHex.x % 2)) * SQRT3_FLOAT + BIAS_FLOAT;

    float x2 = 3 * float(toHex.x) + BIAS_FLOAT;
    float y2 = SQRT3T2_FLOAT * float(toHex.y) - (float(toHex.x % 2)) * SQRT3_FLOAT + BIAS_FLOAT;

    float dx = x2 - x1;
    float dy = y2 - y1;

    float c1x, c1y, c2x, c2y; // test hex
    float dist1, dist2;

    for (uint i = 1; i <= dist; i++) {
        mpos t1 = chex;
        mpos t2 = chex;
        map.MoveHexByDir(t1, dir1, 1);
        map.MoveHexByDir(t2, dir2, 1);

        c1x = 3 * float(t1.x);
        c1y = SQRT3T2_FLOAT * float(t1.y) - (float(t1.x % 2)) * SQRT3_FLOAT;
        c2x = 3 * float(t2.x);
        c2y = SQRT3T2_FLOAT * float(t2.y) - (float(t2.x % 2)) * SQRT3_FLOAT;
        dist1 = dx * (y1 - c1y) - dy * (x1 - c1x);
        dist2 = dx * (y1 - c2y) - dy * (x1 - c2x);
        dist1 = dist1 > 0 ? dist1 : -dist1;
        dist2 = dist2 > 0 ? dist2 : -dist2;

        if (dist1 <= dist2) {
            chex = t1;
        } // left hand biased
        else {
            chex = t2;
        }

        // if MoveHexByDir tried to leave the map and failed:
        if (chex == phex) {
            dist = i - 1;
            break;
        }

        phex = chex;

        if (context.Exec(map, chex)) {
            dist = i;
            break;
        }
    }

    context.FinishExec(map, dist);
    return dist;
}

uint LineTracerSquare(mpos fromHex, mpos toHex, Map map, uint dist, ITraceContext context)
{
    context.StartExec(map, fromHex, toHex, dist);

    float dir = math::atan2(float(toHex.y - fromHex.y), float(toHex.x - fromHex.x));
    float dx = math::cos(dir);
    float dy = math::sin(dir);

    if (math::abs(dx) > math::abs(dy)) {
        dy /= math::abs(dx);
        dx = (dx > 0 ? 1.0f : -1.0f);
    }
    else {
        dx /= math::abs(dy);
        dy = (dy > 0 ? 1.0f : -1.0f);
    }

    float x1 = float(fromHex.x) + 0.5f;
    float y1 = float(fromHex.y) + 0.5f;
    uint16 maxx = map.Size.width;
    uint16 maxy = map.Size.height;
    uint16 cx = 0, cy = 0;

    for (uint i = 1; i <= dist; i++) {
        x1 += dx;
        y1 += dy;
        cx = uint16(math::floor(x1));
        cy = uint16(math::floor(y1));

        if (cx >= maxx || cy >= maxy) {
            dist = i - 1;
            break;
        }

        if (context.Exec(map, mpos(cx, cy))) {
            dist = i;
            break;
        }
    }

    context.FinishExec(map, dist);
    return dist;
}

}
