namespace Serializator
{

// Data serialization

class Serializator
{
    private
    uint8[] dataArray;
    private
    uint curPos;
    private
    uint bufSize;
    private
    uint dataSize;

    Serializator()
    {
        dataArray = array<uint8>();
        curPos = 0;
        bufSize = 0;
        dataSize = 0;
    }

    Serializator(uint approxSize)
    {
        dataArray = array<uint8>();
        curPos = 0;
        bufSize = 0;
        dataSize = 0;
        GrowBuffer(approxSize);
    }

    void GrowBuffer(uint size)
    {
        if (size <= bufSize) {
            return;
        }
        if (bufSize == 0) {
            bufSize = 1;
        }
        while (size > bufSize) {
            bufSize *= 2;
        }
        dataArray.resize(bufSize);
    }

#if CLIENT
    void SaveToCache(string name)
    {
        Game.SetCacheData(name, dataArray, dataSize);
        Clear();
    }

    uint LoadFromCache(string name)
    {
        Clear();
        dataArray = Game.GetCacheData(name);
        if (dataArray != null) {
            bufSize = dataArray.length();
            dataSize = bufSize;
        }
        return bufSize;
    }
#endif

    uint8[] GetData()
    {
        uint8[] data = array<uint8>(dataArray);
        data.resize(dataSize);
        return data;
    }

    uint SetData(const uint8[] data)
    {
        dataArray = array<uint8>(data);
        bufSize = data.length();
        dataSize = data.length();
        return dataSize;
    }

    void Clear()
    {
        curPos = 0;
        bufSize = 0;
        dataSize = 0;
    }

    Serializator SetCurPos(uint pos)
    {
        GrowBuffer(pos);
        curPos = pos;
        if (curPos > dataSize) {
            dataSize = curPos;
        }
        return this;
    }

    Serializator Fill(uint8 value, uint length)
    {
        GrowBuffer(curPos + length);
        for (uint i = 0; i < length; i++) {
            dataArray[curPos++] = value;
        }
        if (curPos > dataSize) {
            dataSize = curPos;
        }
        return this;
    }

    Serializator Set(const int64& value)
    {
        GrowBuffer(curPos + 8);
        dataArray[curPos++] = (value >> 56) & 0xFF;
        dataArray[curPos++] = (value >> 48) & 0xFF;
        dataArray[curPos++] = (value >> 40) & 0xFF;
        dataArray[curPos++] = (value >> 32) & 0xFF;
        dataArray[curPos++] = (value >> 24) & 0xFF;
        dataArray[curPos++] = (value >> 16) & 0xFF;
        dataArray[curPos++] = (value >> 8) & 0xFF;
        dataArray[curPos++] = value & 0xFF;
        if (curPos > dataSize) {
            dataSize = curPos;
        }
        return this;
    }

    Serializator Set(const int32& value)
    {
        GrowBuffer(curPos + 4);
        dataArray[curPos++] = (value >> 24) & 0xFF;
        dataArray[curPos++] = (value >> 16) & 0xFF;
        dataArray[curPos++] = (value >> 8) & 0xFF;
        dataArray[curPos++] = value & 0xFF;
        if (curPos > dataSize) {
            dataSize = curPos;
        }
        return this;
    }

    Serializator Set(const int16& value)
    {
        GrowBuffer(curPos + 2);
        dataArray[curPos++] = (value >> 8) & 0xFF;
        dataArray[curPos++] = value & 0xFF;
        if (curPos > dataSize) {
            dataSize = curPos;
        }
        return this;
    }

    Serializator Set(const int8& value)
    {
        GrowBuffer(curPos + 1);
        dataArray[curPos++] = value;
        if (curPos > dataSize) {
            dataSize = curPos;
        }
        return this;
    }

    Serializator Set(const uint64& value)
    {
        GrowBuffer(curPos + 8);
        dataArray[curPos++] = (value >> 56) & 0xFF;
        dataArray[curPos++] = (value >> 48) & 0xFF;
        dataArray[curPos++] = (value >> 40) & 0xFF;
        dataArray[curPos++] = (value >> 32) & 0xFF;
        dataArray[curPos++] = (value >> 24) & 0xFF;
        dataArray[curPos++] = (value >> 16) & 0xFF;
        dataArray[curPos++] = (value >> 8) & 0xFF;
        dataArray[curPos++] = value & 0xFF;
        if (curPos > dataSize) {
            dataSize = curPos;
        }
        return this;
    }

    Serializator Set(const uint32& value)
    {
        GrowBuffer(curPos + 4);
        dataArray[curPos++] = (value >> 24) & 0xFF;
        dataArray[curPos++] = (value >> 16) & 0xFF;
        dataArray[curPos++] = (value >> 8) & 0xFF;
        dataArray[curPos++] = value & 0xFF;
        if (curPos > dataSize) {
            dataSize = curPos;
        }
        return this;
    }

    Serializator Set(const uint16& value)
    {
        GrowBuffer(curPos + 2);
        dataArray[curPos++] = (value >> 8) & 0xFF;
        dataArray[curPos++] = value & 0xFF;
        if (curPos > dataSize) {
            dataSize = curPos;
        }
        return this;
    }

    Serializator Set(const uint8& value)
    {
        GrowBuffer(curPos + 1);
        dataArray[curPos++] = value;
        if (curPos > dataSize) {
            dataSize = curPos;
        }
        return this;
    }

    Serializator Set(const bool& value)
    {
        GrowBuffer(curPos + 1);
        dataArray[curPos++] = value ? 1 : 0;
        if (curPos > dataSize) {
            dataSize = curPos;
        }
        return this;
    }

    Serializator Set(const string& value)
    {
        uint len = value.rawLength();
        GrowBuffer(curPos + len + 1);
        for (uint i = 0; i < len; i++) {
            dataArray[curPos++] = value.rawGet(i);
        }
        dataArray[curPos++] = 0;
        if (curPos > dataSize) {
            dataSize = curPos;
        }
        return this;
    }

    Serializator Set(const hstring& value)
    {
        return Set(value.str);
    }

    Serializator Set(const ident& value)
    {
        return Set(value.value);
    }

    Serializator Set(const timespan& value)
    {
        return Set(value.nanoseconds);
    }

    Serializator Set(const synctime& value)
    {
        return Set(value.milliseconds);
    }

    Serializator Set(const ucolor& value)
    {
        return Set(value.value);
    }

    Serializator Set(const TextPackName& value)
    {
        int i = value;
        return Set(i);
    }

    Serializator Set(const any& value)
    {
        return Set(string(value));
    }

    Serializator Set(const int64[] values)
    {
        uint valuesLen = values.length();
        uint len = 4 + valuesLen * 8;
        GrowBuffer(curPos + len);
        Set(valuesLen);
        for (uint i = 0; i < valuesLen; i++) {
            Set(values[i]);
        }
        if (curPos > dataSize) {
            dataSize = curPos;
        }
        return this;
    }

    Serializator Set(const int32[] values)
    {
        uint valuesLen = values.length();
        uint len = 4 + valuesLen * 4;
        GrowBuffer(curPos + len);
        Set(valuesLen);
        for (uint i = 0; i < valuesLen; i++) {
            Set(values[i]);
        }
        if (curPos > dataSize) {
            dataSize = curPos;
        }
        return this;
    }

    Serializator Set(const int16[] values)
    {
        uint valuesLen = values.length();
        uint len = 4 + valuesLen * 2;
        GrowBuffer(curPos + len);
        Set(valuesLen);
        for (uint i = 0; i < valuesLen; i++) {
            Set(values[i]);
        }
        if (curPos > dataSize) {
            dataSize = curPos;
        }
        return this;
    }

    Serializator Set(const int8[] values)
    {
        uint valuesLen = values.length();
        uint len = 4 + valuesLen;
        GrowBuffer(curPos + len);
        Set(valuesLen);
        for (uint i = 0; i < valuesLen; i++) {
            Set(values[i]);
        }
        if (curPos > dataSize) {
            dataSize = curPos;
        }
        return this;
    }

    Serializator Set(const uint64[] values)
    {
        uint valuesLen = values.length();
        uint len = 4 + valuesLen * 8;
        GrowBuffer(curPos + len);
        Set(valuesLen);
        for (uint i = 0; i < valuesLen; i++) {
            Set(values[i]);
        }
        if (curPos > dataSize) {
            dataSize = curPos;
        }
        return this;
    }

    Serializator Set(const uint32[] values)
    {
        uint valuesLen = values.length();
        uint len = 4 + valuesLen * 4;
        GrowBuffer(curPos + len);
        Set(valuesLen);
        for (uint i = 0; i < valuesLen; i++) {
            Set(values[i]);
        }
        if (curPos > dataSize) {
            dataSize = curPos;
        }
        return this;
    }

    Serializator Set(const uint16[] values)
    {
        uint valuesLen = values.length();
        uint len = 4 + valuesLen * 2;
        GrowBuffer(curPos + len);
        Set(valuesLen);
        for (uint i = 0; i < valuesLen; i++) {
            Set(values[i]);
        }
        if (curPos > dataSize) {
            dataSize = curPos;
        }
        return this;
    }

    Serializator Set(const uint8[] values)
    {
        uint valuesLen = values.length();
        uint len = 4 + valuesLen;
        GrowBuffer(curPos + len);
        Set(valuesLen);
        for (uint i = 0; i < valuesLen; i++) {
            Set(values[i]);
        }
        if (curPos > dataSize) {
            dataSize = curPos;
        }
        return this;
    }

    Serializator Set(const bool[] values)
    {
        uint valuesLen = values.length();
        uint len = 4 + valuesLen;
        GrowBuffer(curPos + len);
        Set(valuesLen);
        for (uint i = 0; i < valuesLen; i++) {
            Set(values[i]);
        }
        if (curPos > dataSize) {
            dataSize = curPos;
        }
        return this;
    }

    Serializator Set(const string[] values)
    {
        uint valuesLen = values.length();
        uint len = 4 + valuesLen; // Length and zeros
        for (uint i = 0; i < valuesLen; i++) {
            len += values[i].length();
        }
        GrowBuffer(curPos + len);
        Set(valuesLen);
        for (uint i = 0; i < valuesLen; i++) {
            Set(values[i]);
        }
        if (curPos > dataSize) {
            dataSize = curPos;
        }
        return this;
    }

    Serializator Set(const hstring[] values)
    {
        uint valuesLen = values.length();
        uint len = 4 + valuesLen; // Length and zeros
        for (uint i = 0; i < valuesLen; i++) {
            len += values[i].str.length();
        }
        GrowBuffer(curPos + len);
        Set(valuesLen);
        for (uint i = 0; i < valuesLen; i++) {
            Set(values[i]);
        }
        if (curPos > dataSize) {
            dataSize = curPos;
        }
        return this;
    }

    Serializator Set(const ident[] values)
    {
        uint valuesLen = values.length();
        uint len = 4 + valuesLen;
        GrowBuffer(curPos + len);
        Set(valuesLen);
        for (uint i = 0; i < valuesLen; i++) {
            Set(values[i]);
        }
        if (curPos > dataSize) {
            dataSize = curPos;
        }
        return this;
    }

    Serializator Get(int64& value)
    {
        value = 0;
        if (curPos + 8 > dataSize) {
            return this;
        }
        value |= dataArray[curPos++] << 56;
        value |= dataArray[curPos++] << 48;
        value |= dataArray[curPos++] << 40;
        value |= dataArray[curPos++] << 32;
        value |= dataArray[curPos++] << 24;
        value |= dataArray[curPos++] << 16;
        value |= dataArray[curPos++] << 8;
        value |= dataArray[curPos++];
        return this;
    }

    Serializator Get(int32& value)
    {
        value = 0;
        if (curPos + 4 > dataSize) {
            return this;
        }
        value |= dataArray[curPos++] << 24;
        value |= dataArray[curPos++] << 16;
        value |= dataArray[curPos++] << 8;
        value |= dataArray[curPos++];
        return this;
    }

    Serializator Get(int16& value)
    {
        value = 0;
        if (curPos + 2 > dataSize) {
            return this;
        }
        value |= dataArray[curPos++] << 8;
        value |= dataArray[curPos++];
        return this;
    }

    Serializator Get(int8& value)
    {
        value = 0;
        if (curPos + 1 > dataSize) {
            return this;
        }
        value = dataArray[curPos++];
        return this;
    }

    Serializator Get(uint64& value)
    {
        value = 0;
        if (curPos + 8 > dataSize) {
            return this;
        }
        value |= dataArray[curPos++] << 56;
        value |= dataArray[curPos++] << 48;
        value |= dataArray[curPos++] << 40;
        value |= dataArray[curPos++] << 32;
        value |= dataArray[curPos++] << 24;
        value |= dataArray[curPos++] << 16;
        value |= dataArray[curPos++] << 8;
        value |= dataArray[curPos++];
        return this;
    }

    Serializator Get(uint32& value)
    {
        value = 0;
        if (curPos + 4 > dataSize) {
            return this;
        }
        value |= dataArray[curPos++] << 24;
        value |= dataArray[curPos++] << 16;
        value |= dataArray[curPos++] << 8;
        value |= dataArray[curPos++];
        return this;
    }

    Serializator Get(uint16& value)
    {
        value = 0;
        if (curPos + 2 > dataSize) {
            return this;
        }
        value |= dataArray[curPos++] << 8;
        value |= dataArray[curPos++];
        return this;
    }

    Serializator Get(uint8& value)
    {
        value = 0;
        if (curPos + 1 > dataSize) {
            return this;
        }
        value = dataArray[curPos++];
        return this;
    }

    Serializator Get(bool& value)
    {
        value = false;
        if (curPos + 1 > dataSize) {
            return this;
        }
        value = dataArray[curPos++] == 1 ? true : false;
        return this;
    }

    Serializator Get(string& str)
    {
        uint len = 0;
        for (uint i = curPos;; i++) {
            if (i == dataSize) {
                str = "";
                return this;
            }
            if (dataArray[i] == 0) {
                len = i - curPos;
                break;
            }
        }
        str.rawResize(len);
        for (uint i = 0; i < len; i++) {
            str.rawSet(i, dataArray[curPos++]);
        }
        curPos++; // Skip zero
        return this;
    }

    Serializator Get(hstring& value)
    {
        string str;
        Get(str);
        value = hstring(str);
        return this;
    }

    Serializator Get(ident& value)
    {
        Get(value.value);
        return this;
    }

    Serializator Get(timespan& value)
    {
        int64 i = 0;
        Get(i);
        value = timespan(i, Time::NanosecondsPlace);
        return this;
    }

    Serializator Get(synctime& value)
    {
        int64 i = 0;
        Get(i);
        value = synctime(i, Time::MillisecondsPlace);
        return this;
    }

    Serializator Get(ucolor& value)
    {
        Get(value.value);
        return this;
    }

    Serializator Get(TextPackName& value)
    {
        int i = 0;
        Get(i);
        value = TextPackName(i);
        return this;
    }

    Serializator Get(any& value)
    {
        string str;
        Get(str);
        value = str;
        return this;
    }

    Serializator Get(int64[] values)
    {
        uint valuesLen = 0;
        Get(valuesLen);
        values.resize(valuesLen);
        for (uint i = 0; i < valuesLen; i++) {
            Get(values[i]);
        }
        return this;
    }

    Serializator Get(int32[] values)
    {
        uint valuesLen = 0;
        Get(valuesLen);
        values.resize(valuesLen);
        for (uint i = 0; i < valuesLen; i++) {
            Get(values[i]);
        }
        return this;
    }

    Serializator Get(int16[] values)
    {
        uint valuesLen = 0;
        Get(valuesLen);
        values.resize(valuesLen);
        for (uint i = 0; i < valuesLen; i++) {
            Get(values[i]);
        }
        return this;
    }

    Serializator Get(int8[] values)
    {
        uint valuesLen = 0;
        Get(valuesLen);
        values.resize(valuesLen);
        for (uint i = 0; i < valuesLen; i++) {
            Get(values[i]);
        }
        return this;
    }

    Serializator Get(uint64[] values)
    {
        uint valuesLen = 0;
        Get(valuesLen);
        values.resize(valuesLen);
        for (uint i = 0; i < valuesLen; i++) {
            Get(values[i]);
        }
        return this;
    }

    Serializator Get(uint32[] values)
    {
        uint valuesLen = 0;
        Get(valuesLen);
        values.resize(valuesLen);
        for (uint i = 0; i < valuesLen; i++) {
            Get(values[i]);
        }
        return this;
    }

    Serializator Get(uint16[] values)
    {
        uint valuesLen = 0;
        Get(valuesLen);
        values.resize(valuesLen);
        for (uint i = 0; i < valuesLen; i++) {
            Get(values[i]);
        }
        return this;
    }

    Serializator Get(uint8[] values)
    {
        uint valuesLen = 0;
        Get(valuesLen);
        values.resize(valuesLen);
        for (uint i = 0; i < valuesLen; i++) {
            Get(values[i]);
        }
        return this;
    }

    Serializator Get(bool[] values)
    {
        uint valuesLen = 0;
        Get(valuesLen);
        values.resize(valuesLen);
        for (uint i = 0; i < valuesLen; i++) {
            Get(values[i]);
        }
        return this;
    }

    Serializator Get(string[] values)
    {
        uint valuesLen = 0;
        Get(valuesLen);
        values.resize(valuesLen);
        for (uint i = 0; i < valuesLen; i++) {
            Get(values[i]);
        }
        return this;
    }

    Serializator Get(hstring[] values)
    {
        uint valuesLen = 0;
        Get(valuesLen);
        values.resize(valuesLen);
        for (uint i = 0; i < valuesLen; i++) {
            Get(values[i]);
        }
        return this;
    }

    Serializator Get(ident[] values)
    {
        uint valuesLen = 0;
        Get(valuesLen);
        values.resize(valuesLen);
        for (uint i = 0; i < valuesLen; i++) {
            Get(values[i]);
        }
        return this;
    }
};

}
