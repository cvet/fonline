cmake_minimum_required(VERSION 3.16.3)

# Option setter
function(SetOption var value)
	if(NOT DEFINED ${var})
		set(${var} ${value} PARENT_SCOPE)
	endif()
endfunction()

# Quiet all non-error messages instead ourself
function(message mode)
	if(${mode} STREQUAL "FATAL_ERROR")
		_message(FATAL_ERROR ${ARGN})
	elseif(${mode} STREQUAL "SEND_ERROR")
		_message(SEND_ERROR ${ARGN})
	elseif(FO_VERBOSE_BUILD)
		_message(${mode} ${ARGN})
	endif()
endfunction()

function(StatusMessage)
	_message(STATUS ${ARGN})
endfunction()

function(AbortMessage)
	_message(FATAL_ERROR ${ARGN})
endfunction()

# Skip all install rules
function(install)
endfunction()

function(export)
endfunction()

set(CMAKE_SKIP_INSTALL_RULES ON CACHE BOOL "Forced by FOnline" FORCE)

# Disable warnings in third-party libs
function(DisableLibWarnings)
	foreach(lib ${ARGV})
		target_compile_options(${lib} PRIVATE
			$<$<OR:$<CXX_COMPILER_ID:Clang>,$<CXX_COMPILER_ID:AppleClang>,$<CXX_COMPILER_ID:GNU>>:-w>
			$<$<CXX_COMPILER_ID:MSVC>:/W0>)
	endforeach()
endfunction()

# Add C/CXX compile option
macro(add_compile_options_C_CXX)
	foreach(option ${ARGV})
		add_compile_options($<$<COMPILE_LANGUAGE:C,CXX>:${option}>)
	endforeach()
endmacro()

# Temporary variables
set(FO_ENGINE_ROOT "")
set(FO_BUILD_HASH "")
set(FO_GIT_ROOT "")
set(FO_GIT_HASH_RESULT "")
set(FO_GIT_HASH "")
set(FO_CONFIGURATION_TYPES "Debug;Release;RelWithDebInfo;MinSizeRel")
set(FO_MULTICONFIG NO)
set(FO_HEADLESS_ONLY YES)
set(FO_OS "")
set(FO_OS_UPPER "")
set(FO_BUILD_LIBRARY NO)
set(FO_GEN_DEPENDENCIES "")
set(FO_CLIENT_OUTPUT "")
set(FO_SERVER_OUTPUT "")
set(FO_SINGLE_OUTPUT "")
set(FO_EDITOR_OUTPUT "")
set(FO_MAPPER_OUTPUT "")
set(FO_ASCOMPILER_OUTPUT "")
set(FO_BAKER_OUTPUT "")
set(FO_TESTS_OUTPUT "")
set(FO_BACKED_RESOURCES_OUTPUT "")
set(FO_BUILD_PLATFORM "")
set(FO_COMMON_SYSTEM_LIBS "")
set(FO_COMMON_LIBS "")
set(FO_SERVER_SYSTEM_LIBS "")
set(FO_SERVER_LIBS "")
set(FO_CLIENT_SYSTEM_LIBS "")
set(FO_CLIENT_LIBS "")
set(FO_RENDER_SYSTEM_LIBS "")
set(FO_RENDER_LIBS "")
set(FO_BAKER_SYSTEM_LIBS "")
set(FO_BAKER_LIBS "")
set(FO_TESTING_LIBS "")
set(FO_DUMMY_TARGETS "")
set(FO_USE_GLEW NO)
set(FO_RPMALLOC_DIR "")
set(FO_SDL_DIR "")
set(FO_TRACY_DIR "")
set(FO_ZLIB_DIR "")
set(FO_PNG_DIR "")
set(FO_OGG_DIR "")
set(FO_VORBIS_DIR "")
set(FO_THEORA_DIR "")
set(FO_ACM_DIR "")
set(FO_SHA_DIR "")
set(FO_GLEW_DIR "")
set(FO_UFBX_DIR "")
set(FO_JSON_DIR "")
set(FO_FMT_DIR "")
set(FO_ASIO_DIR "")
set(FO_WEBSOCKETS_DIR "")
set(FO_MONGODB_DIR "")
set(FO_UNQLITE_DIR "")
set(FO_VARIANT_DIR "")
set(FO_LIBRESSL_DIR "")
set(FO_DEAR_IMGUI_DIR "")
set(FO_CATCH2_DIR "")
set(FO_BACKWARDCPP_DIR "")
set(FO_SPARK_DIR "")
set(FO_GLSLANG_DIR "")
set(FO_SPIRV_CROSS_DIR "")
set(FO_ANGELSCRIPT_DIR "")
set(FO_ANGELSCRIPT_EXT_DIR "")
set(FO_ANGELSCRIPT_SDK_DIR "")
set(FO_ANGELSCRIPT_PREPROCESSOR_DIR "")
set(FO_ACM_SOURCE "")
set(FO_SHA_SOURCE "")
set(FO_ZLIB_CONTRIB_SOURCE "")
set(FO_ZLIB_CONTRIB_SOURCE "")
set(FO_CATCH2_SOURCE "")
set(FO_DOTNET_DIR "")
set(FO_MONO_OS "")
set(FO_MONO_ARCH "")
set(FO_MONO_CONFIGURATION "")
set(FO_MONO_TRIPLET "")
set(FO_MONO_SETUP_SCRIPT "")
set(FO_RPMALLOC_SOURCE "")
set(FO_OGG_SOURCE "")
set(FO_VORBIS_SOURCE "")
set(FO_THEORA_SOURCE "")
set(FO_GLEW_SOURCE "")
set(FO_UFBX_SOURCE "")
set(FO_IMGUI_SOURCE "")
set(FO_COMMON_SOURCE "")
set(FO_SERVER_BASE_SOURCE "")
set(FO_CLIENT_BASE_SOURCE "")
set(FO_SERVER_SOURCE "")
set(FO_CLIENT_SOURCE "")
set(FO_SINGLE_SOURCE "")
set(FO_EDITOR_SOURCE "")
set(FO_MAPPER_SOURCE "")
set(FO_ASCOMPILER_SOURCE "")
set(FO_BAKER_SOURCE "")
set(FO_SOURCE_META_FILES "")
set(FO_CONTENT_META_FILES "")
set(FO_TESTS_SOURCE "")
set(FO_CORE_LIBS_GROUP "")
set(FO_COMMANDS_GROUP "")
set(FO_APPLICATIONS_GROUP "")
set(FO_CACHE_VARIABLES "")
set(FO_CONTRIBUTION_DIR "")
set(FO_CONTENT "")
set(FO_RESOURCES "")
set(FO_SPRITE_ATLAS "")
set(FO_CODEGEN_COMMAND "")
set(FO_CODEGEN_COMMAND_ARGS "")
set(FO_CODEGEN_META_SOURCE "")
set(FO_CODEGEN_OUTPUT "")
set(FO_COMMON_NATIVE_SOURCE "")
set(FO_SERVER_NATIVE_SOURCE "")
set(FO_CLIENT_NATIVE_SOURCE "")
set(FO_EDITOR_NATIVE_SOURCE "")
set(FO_MAPPER_NATIVE_SOURCE "")
set(FO_MONO_ASSEMBLIES "")
set(FO_MONO_SOURCE "")
set(FO_PACKAGES "")
set(FO_RC_FILE "")

# Evaluate engine root
get_filename_component(FO_ENGINE_ROOT ${CMAKE_CURRENT_LIST_DIR}/.. ABSOLUTE)
cmake_path(RELATIVE_PATH FO_ENGINE_ROOT BASE_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})
