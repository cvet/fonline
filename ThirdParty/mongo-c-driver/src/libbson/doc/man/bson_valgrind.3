.\" Man page generated from reStructuredText.
.
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.TH "BSON_VALGRIND" "3" "Aug 31, 2022" "1.23.0" "libbson"
.SH NAME
bson_valgrind \- Use Valgrind to Check For BSON Data Leaks
.sp
A stack\-allocated \fI\%bson_t\fP contains a small internal buffer; it only heap\-allocates additional storage if necessary, depending on its data size. Therefore if you forget to call \fI\%bson_destroy()\fP on a stack\-allocated \fI\%bson_t\fP, it might or might not cause a leak that can be detected by valgrind during testing.
.sp
To catch all potential BSON data leaks in your code, configure the BSON_MEMCHECK flag:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
cmake \-DCMAKE_C_FLAGS=\(dq\-DBSON_MEMCHECK \-g\(dq .
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
With this flag set, every \fI\%bson_t\fP mallocs at least one byte. Run your program\(aqs unittests with valgrind to verify all \fI\%bson_t\fP structs are destroyed.
.sp
Set the environment variable \fBMONGOC_TEST_VALGRIND\fP to \fBon\fP to skip timing\-dependent tests known to fail with valgrind.
.SH AUTHOR
MongoDB, Inc
.SH COPYRIGHT
2017-present, MongoDB, Inc
.\" Generated by docutils manpage writer.
.
