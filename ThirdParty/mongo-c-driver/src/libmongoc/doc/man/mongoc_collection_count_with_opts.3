.\" Man page generated from reStructuredText.
.
.TH "MONGOC_COLLECTION_COUNT_WITH_OPTS" "3" "Nov 03, 2021" "1.19.2" "libmongoc"
.SH NAME
mongoc_collection_count_with_opts \- mongoc_collection_count_with_opts()
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.SH DEPRECATED
.sp
This function is deprecated and should not be used in new code.
Use \fBmongoc_collection_count_documents\fP or \fBmongoc_collection_estimated_document_count\fP instead.
.sp
\fBmongoc_collection_count_documents\fP has similar performance to calling \fBmongoc_collection_count\fP with a non\-NULL \fBquery\fP, and is guaranteed to retrieve an accurate collection count. See migrating from deprecated count functions for details.
.sp
\fBmongoc_collection_estimated_document_count\fP has the same performance as calling \fBmongoc_collection_count\fP with a NULL \fBquery\fP, but is not guaranteed to retrieve an accurate collection count.
.SH SYNOPSIS
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
int64_t
mongoc_collection_count_with_opts (mongoc_collection_t *collection,
                                   mongoc_query_flags_t flags,
                                   const bson_t *query,
                                   int64_t skip,
                                   int64_t limit,
                                   const bson_t *opts,
                                   const mongoc_read_prefs_t *read_prefs,
                                   bson_error_t *error)
 BSON_GNUC_DEPRECATED_FOR (mongoc_collection_count_documents or
                           mongoc_collection_estimated_document_count);
.ft P
.fi
.UNINDENT
.UNINDENT
.SH PARAMETERS
.INDENT 0.0
.IP \(bu 2
\fBcollection\fP: A \fBmongoc_collection_t\fP\&.
.IP \(bu 2
\fBflags\fP: A \fBmongoc_query_flags_t\fP\&.
.IP \(bu 2
\fBquery\fP: A \fI\%bson_t\fP containing the query.
.IP \(bu 2
\fBskip\fP: A int64_t, zero to ignore.
.IP \(bu 2
\fBlimit\fP: A int64_t, zero to ignore.
.IP \(bu 2
\fBopts\fP: A \fI\%bson_t\fP, \fBNULL\fP to ignore.
.IP \(bu 2
\fBread_prefs\fP: An optional \fBmongoc_read_prefs_t\fP, otherwise uses the collection\(aqs read preference.
.IP \(bu 2
\fBerror\fP: An optional location for a \fBbson_error_t\fP or \fBNULL\fP\&.
.UNINDENT
.sp
\fBopts\fP may be NULL or a BSON document with additional command options:
.INDENT 0.0
.IP \(bu 2
\fBreadConcern\fP: Construct a \fBmongoc_read_concern_t\fP and use \fBmongoc_read_concern_append\fP to add the read concern to \fBopts\fP\&. See the example code for \fBmongoc_client_read_command_with_opts\fP\&. Read concern requires MongoDB 3.2 or later, otherwise an error is returned.
.IP \(bu 2
\fBsessionId\fP: First, construct a \fBmongoc_client_session_t\fP with \fBmongoc_client_start_session\fP\&. You can begin a transaction with \fBmongoc_client_session_start_transaction\fP, optionally with a \fBmongoc_transaction_opt_t\fP that overrides the options inherited from \fBcollection\fP, and use \fBmongoc_client_session_append\fP to add the session to \fBopts\fP\&. See the example code for \fBmongoc_client_session_t\fP\&.
.IP \(bu 2
\fBcollation\fP: Configure textual comparisons. See Setting Collation Order, and \fI\%the MongoDB Manual entry on Collation\fP\&. Collation requires MongoDB 3.2 or later, otherwise an error is returned.
.IP \(bu 2
\fBserverId\fP: To target a specific server, include an int32 "serverId" field. Obtain the id by calling \fBmongoc_client_select_server\fP, then \fBmongoc_server_description_id\fP on its return value.
.UNINDENT
.SH DESCRIPTION
.sp
This function shall execute a count query on the underlying \(aqcollection\(aq. The bson \(aqquery\(aq is not validated, simply passed along as appropriate to the server.  As such, compatibility and errors should be validated in the appropriate server documentation.
.sp
The \fBmongoc_read_concern_t\fP specified on the \fBmongoc_collection_t\fP will be used, if any. If \fBread_prefs\fP is NULL, the collection\(aqs read preferences are used.
.sp
In addition to the standard functionality available from mongoc_collection_count, this function allows the user to add arbitrary extra keys to the count.  This pass through enables features such as hinting for counts.
.sp
For more information, see the \fI\%query reference\fP at the MongoDB website.
.sp
This function is considered a retryable read operation.
Upon a transient error (a network error, errors due to replica set failover, etc.) the operation is safely retried once.
If \fBretryreads\fP is false in the URI (see \fBmongoc_uri_t\fP) the retry behavior does not apply.
.SH ERRORS
.sp
Errors are propagated via the \fBerror\fP parameter.
.SH RETURNS
.sp
\-1 on failure, otherwise the number of documents counted.
.SH EXAMPLES
.sp
Basic Counting
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
#include <bson/bson.h>
#include <mongoc/mongoc.h>
#include <stdio.h>

static void
print_query_count (mongoc_collection_t *collection, bson_t *query)
{
   bson_error_t error;
   int64_t count;
   bson_t opts;

   bson_init (&opts);
   BSON_APPEND_UTF8 (&opts, "hint", "_id_");

   count = mongoc_collection_count_with_opts (
      collection, MONGOC_QUERY_NONE, query, 0, 0, &opts, NULL, &error);

   bson_destroy (&opts);

   if (count < 0) {
      fprintf (stderr, "Count failed: %s\en", error.message);
   } else {
      printf ("%" PRId64 " documents counted.\en", count);
   }
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Counting with Collation
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
#include <bson/bson.h>
#include <mongoc/mongoc.h>
#include <stdio.h>

static void
print_query_count (mongoc_collection_t *collection, bson_t *query)
{
   bson_t *selector;
   bson_t *opts;
   bson_error_t error;
   int64_t count;

   selector = BCON_NEW ("_id", "{", "$gt", BCON_UTF8 ("one"), "}");

   /* "One" normally sorts before "one"; make "one" come first */
   opts = BCON_NEW ("collation",
                    "{",
                    "locale",
                    BCON_UTF8 ("en_US"),
                    "caseFirst",
                    BCON_UTF8 ("lower"),
                    "}");

   count = mongoc_collection_count_with_opts (
      collection, MONGOC_QUERY_NONE, query, 0, 0, opts, NULL, &error);

   bson_destroy (selector);
   bson_destroy (opts);

   if (count < 0) {
      fprintf (stderr, "Count failed: %s\en", error.message);
   } else {
      printf ("%" PRId64 " documents counted.\en", count);
   }
}
.ft P
.fi
.UNINDENT
.UNINDENT
.SH AUTHOR
MongoDB, Inc
.SH COPYRIGHT
2017-present, MongoDB, Inc
.\" Generated by docutils manpage writer.
.
