.\" Man page generated from reStructuredText.
.
.TH "MONGOC_CLIENT_WRITE_COMMAND_WITH_OPTS" "3" "Nov 03, 2021" "1.19.2" "libmongoc"
.SH NAME
mongoc_client_write_command_with_opts \- mongoc_client_write_command_with_opts()
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.SH SYNOPSIS
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
bool
mongoc_client_write_command_with_opts (mongoc_client_t *client,
                                       const char *db_name,
                                       const bson_t *command,
                                       const bson_t *opts,
                                       bson_t *reply,
                                       bson_error_t *error);
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Execute a command on the server, applying logic that is specific to commands that write, and taking the MongoDB server version into account. To send a raw command to the server without any of this logic, use \fBmongoc_client_command_simple\fP\&.
.sp
Use this function for commands that write such as "drop" or "createRole" (but not for "insert", "update", or "delete", see \fI\%Basic Write Operations\fP). Write concern and collation can be overridden by various sources. In a transaction, read concern and write concern are prohibited in \fBopts\fP\&. The highest\-priority sources for these options are listed first in the following table. The write concern is omitted for MongoDB before 3.4.
.TS
center;
|l|l|.
_
T{
Write Concern
T}	T{
Collation
T}
_
T{
\fBopts\fP
T}	T{
\fBopts\fP
T}
_
T{
Transaction
T}	T{
T}
_
T{
\fBclient\fP
T}	T{
T}
_
.TE
.sp
See the example for transactions and for the "distinct" command with opts\&.
.sp
\fBreply\fP is always initialized, and must be freed with \fI\%bson_destroy()\fP\&.
.SH PARAMETERS
.INDENT 0.0
.IP \(bu 2
\fBclient\fP: A \fBmongoc_client_t\fP\&.
.IP \(bu 2
\fBdb_name\fP: The name of the database to run the command on.
.IP \(bu 2
\fBcommand\fP: A \fI\%bson_t\fP containing the command specification.
.IP \(bu 2
\fBopts\fP: A \fI\%bson_t\fP containing additional options.
.IP \(bu 2
\fBreply\fP: A location for the resulting document.
.IP \(bu 2
\fBerror\fP: An optional location for a \fBbson_error_t\fP or \fBNULL\fP\&.
.UNINDENT
.sp
\fBopts\fP may be NULL or a BSON document with additional command options:
.INDENT 0.0
.IP \(bu 2
\fBwriteConcern\fP: Construct a \fBmongoc_write_concern_t\fP and use \fBmongoc_write_concern_append\fP to add the write concern to \fBopts\fP\&. See the example code for \fBmongoc_client_write_command_with_opts\fP\&.
.IP \(bu 2
\fBsessionId\fP: First, construct a \fBmongoc_client_session_t\fP with \fBmongoc_client_start_session\fP\&. You can begin a transaction with \fBmongoc_client_session_start_transaction\fP, optionally with a \fBmongoc_transaction_opt_t\fP that overrides the options inherited from \fBclient\fP, and use \fBmongoc_client_session_append\fP to add the session to \fBopts\fP\&. See the example code for \fBmongoc_client_session_t\fP\&.
.IP \(bu 2
\fBcollation\fP: Configure textual comparisons. See Setting Collation Order, and \fI\%the MongoDB Manual entry on Collation\fP\&. Collation requires MongoDB 3.2 or later, otherwise an error is returned.
.IP \(bu 2
\fBserverId\fP: To target a specific server, include an int32 "serverId" field. Obtain the id by calling \fBmongoc_client_select_server\fP, then \fBmongoc_server_description_id\fP on its return value.
.UNINDENT
.sp
Consult \fI\%the MongoDB Manual entry on Database Commands\fP for each command\(aqs arguments.
.SH ERRORS
.sp
Errors are propagated via the \fBerror\fP parameter.
.SH RETURNS
.sp
Returns \fBtrue\fP if successful. Returns \fBfalse\fP and sets \fBerror\fP if there are invalid arguments or a server or network error.
.sp
A write concern timeout or write concern error is considered a failure.
.SH BASIC WRITE OPERATIONS
.sp
Do not use this function to call the basic write commands "insert", "update", and "delete". Those commands require special logic not implemented in \fBmongoc_client_write_command_with_opts\fP\&. For basic write operations use CRUD functions such as \fBmongoc_collection_insert_one\fP and the others described in the CRUD tutorial, or use the Bulk API\&.
.SH EXAMPLE
.sp
example\-command\-with\-opts.c
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
/*

Demonstrates how to prepare options for mongoc_client_read_command_with_opts and
mongoc_client_write_command_with_opts. First it calls "cloneCollectionAsCapped"
command with "writeConcern" option, then "distinct" command with "collation" and
"readConcern" options,

Start a MongoDB 3.4 replica set with \-\-enableMajorityReadConcern and insert two
documents:

$ mongo
MongoDB Enterprise replset:PRIMARY> db.my_collection.insert({x: 1, y: "One"})
WriteResult({ "nInserted" : 1 })
MongoDB Enterprise replset:PRIMARY> db.my_collection.insert({x: 2, y: "Two"})
WriteResult({ "nInserted" : 1 })

Build and run the example:

gcc example\-command\-with\-opts.c \-o example\-command\-with\-opts $(pkg\-config
\-\-cflags \-\-libs libmongoc\-1.0)
\&./example\-command\-with\-opts [CONNECTION_STRING]
cloneCollectionAsCapped: { "ok" : 1 }
distinct: { "values" : [ 1, 2 ], "ok" : 1 }

*/

#include <mongoc/mongoc.h>
#include <stdio.h>
#include <stdlib.h>

int
main (int argc, char *argv[])
{
   mongoc_client_t *client;
   const char *uri_string = "mongodb://127.0.0.1/?appname=client\-example";
   mongoc_uri_t *uri;
   bson_t *cmd;
   bson_t *opts;
   mongoc_write_concern_t *write_concern;
   mongoc_read_prefs_t *read_prefs;
   mongoc_read_concern_t *read_concern;
   bson_t reply;
   bson_error_t error;
   char *json;

   mongoc_init ();

   if (argc > 1) {
      uri_string = argv[1];
   }

   uri = mongoc_uri_new_with_error (uri_string, &error);
   if (!uri) {
      fprintf (stderr,
               "failed to parse URI: %s\en"
               "error message:       %s\en",
               uri_string,
               error.message);
      return EXIT_FAILURE;
   }

   client = mongoc_client_new_from_uri (uri);
   if (!client) {
      return EXIT_FAILURE;
   }

   mongoc_client_set_error_api (client, 2);

   cmd = BCON_NEW ("cloneCollectionAsCapped",
                   BCON_UTF8 ("my_collection"),
                   "toCollection",
                   BCON_UTF8 ("my_capped_collection"),
                   "size",
                   BCON_INT64 (1024 * 1024));

   /* include write concern "majority" in command options */
   write_concern = mongoc_write_concern_new ();
   mongoc_write_concern_set_wmajority (write_concern, 10000 /* wtimeoutMS */);
   opts = bson_new ();
   mongoc_write_concern_append (write_concern, opts);

   if (mongoc_client_write_command_with_opts (
          client, "test", cmd, opts, &reply, &error)) {
      json = bson_as_canonical_extended_json (&reply, NULL);
      printf ("cloneCollectionAsCapped: %s\en", json);
      bson_free (json);
   } else {
      fprintf (stderr, "cloneCollectionAsCapped: %s\en", error.message);
   }

   bson_free (cmd);
   bson_free (opts);

   /* distinct values of "x" in "my_collection" where "y" sorts after "one" */
   cmd = BCON_NEW ("distinct",
                   BCON_UTF8 ("my_collection"),
                   "key",
                   BCON_UTF8 ("x"),
                   "query",
                   "{",
                   "y",
                   "{",
                   "$gt",
                   BCON_UTF8 ("one"),
                   "}",
                   "}");

   read_prefs = mongoc_read_prefs_new (MONGOC_READ_SECONDARY);

   /* "One" normally sorts before "one"; make "One" sort after "one" */
   opts = BCON_NEW ("collation",
                    "{",
                    "locale",
                    BCON_UTF8 ("en_US"),
                    "caseFirst",
                    BCON_UTF8 ("lower"),
                    "}");

   /* add a read concern to "opts" */
   read_concern = mongoc_read_concern_new ();
   mongoc_read_concern_set_level (read_concern,
                                  MONGOC_READ_CONCERN_LEVEL_MAJORITY);

   mongoc_read_concern_append (read_concern, opts);

   if (mongoc_client_read_command_with_opts (
          client, "test", cmd, read_prefs, opts, &reply, &error)) {
      json = bson_as_canonical_extended_json (&reply, NULL);
      printf ("distinct: %s\en", json);
      bson_free (json);
   } else {
      fprintf (stderr, "distinct: %s\en", error.message);
   }

   bson_destroy (cmd);
   bson_destroy (opts);
   bson_destroy (&reply);
   mongoc_read_prefs_destroy (read_prefs);
   mongoc_read_concern_destroy (read_concern);
   mongoc_write_concern_destroy (write_concern);
   mongoc_uri_destroy (uri);
   mongoc_client_destroy (client);

   mongoc_cleanup ();

   return EXIT_SUCCESS;
}

.ft P
.fi
.UNINDENT
.UNINDENT
.SH AUTHOR
MongoDB, Inc
.SH COPYRIGHT
2017-present, MongoDB, Inc
.\" Generated by docutils manpage writer.
.
