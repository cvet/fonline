.\" Man page generated from reStructuredText.
.
.TH "MONGOC_LOGGING" "3" "Nov 03, 2021" "1.19.2" "libmongoc"
.SH NAME
mongoc_logging \- Logging
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.sp
MongoDB C driver Logging Abstraction
.SH SYNOPSIS
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
typedef enum {
   MONGOC_LOG_LEVEL_ERROR,
   MONGOC_LOG_LEVEL_CRITICAL,
   MONGOC_LOG_LEVEL_WARNING,
   MONGOC_LOG_LEVEL_MESSAGE,
   MONGOC_LOG_LEVEL_INFO,
   MONGOC_LOG_LEVEL_DEBUG,
   MONGOC_LOG_LEVEL_TRACE,
} mongoc_log_level_t;

#define MONGOC_ERROR(...)
#define MONGOC_CRITICAL(...)
#define MONGOC_WARNING(...)
#define MONGOC_MESSAGE(...)
#define MONGOC_INFO(...)
#define MONGOC_DEBUG(...)

typedef void (*mongoc_log_func_t) (mongoc_log_level_t log_level,
                                   const char *log_domain,
                                   const char *message,
                                   void *user_data);

void
mongoc_log_set_handler (mongoc_log_func_t log_func, void *user_data);
void
mongoc_log (mongoc_log_level_t log_level,
            const char *log_domain,
            const char *format,
            ...) BSON_GNUC_PRINTF (3, 4);
const char *
mongoc_log_level_str (mongoc_log_level_t log_level);
void
mongoc_log_default_handler (mongoc_log_level_t log_level,
                            const char *log_domain,
                            const char *message,
                            void *user_data);
void
mongoc_log_trace_enable (void);
void
mongoc_log_trace_disable (void);
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The MongoDB C driver comes with an abstraction for logging that you can use in your application, or integrate with an existing logging system.
.SH MACROS
.sp
To make logging a little less painful, various helper macros are provided. See the following example.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
#undef MONGOC_LOG_DOMAIN
#define MONGOC_LOG_DOMAIN "my\-custom\-domain"

MONGOC_WARNING ("An error occurred: %s", strerror (errno));
.ft P
.fi
.UNINDENT
.UNINDENT
.SH CUSTOM LOG HANDLERS
.INDENT 0.0
.TP
.B The default log handler prints a timestamp and the log message to \fBstdout\fP, or to \fBstderr\fP for warnings, critical messages, and errors.
You can override the handler with \fBmongoc_log_set_handler()\fP\&.
Your handler function is called in a mutex for thread safety.
.UNINDENT
.sp
For example, you could register a custom handler to suppress messages at INFO level and below:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
void
my_logger (mongoc_log_level_t log_level,
           const char *log_domain,
           const char *message,
           void *user_data)
{
   /* smaller values are more important */
   if (log_level < MONGOC_LOG_LEVEL_INFO) {
      mongoc_log_default_handler (log_level, log_domain, message, user_data);
   }
}

int
main (int argc, char *argv[])
{
   mongoc_log_set_handler (my_logger, NULL);
   mongoc_init ();

   /* ... your code ...  */

   mongoc_cleanup ();
   return 0;
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Note that in the example above \fBmongoc_log_set_handler()\fP is called before \fBmongoc_init()\fP\&.
Otherwise, some log traces could not be processed by the log handler.
.sp
To restore the default handler:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
mongoc_log_set_handler (mongoc_log_default_handler, NULL);
.ft P
.fi
.UNINDENT
.UNINDENT
.SH DISABLE LOGGING
.sp
To disable all logging, including warnings, critical messages and errors, provide an empty log handler:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
mongoc_log_set_handler (NULL, NULL);
.ft P
.fi
.UNINDENT
.UNINDENT
.SH TRACING
.sp
If compiling your own copy of the MongoDB C driver, consider configuring with \fB\-DENABLE_TRACING=ON\fP to enable function tracing and hex dumps of network packets to \fBSTDERR\fP and \fBSTDOUT\fP during development and debugging.
.sp
This is especially useful when debugging what may be going on internally in the driver.
.sp
Trace messages can be enabled and disabled by calling \fBmongoc_log_trace_enable()\fP and \fBmongoc_log_trace_disable()\fP
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
Compiling the driver with \fB\-DENABLE_TRACING=ON\fP will affect its performance. Disabling tracing with \fBmongoc_log_trace_disable()\fP significantly reduces the overhead, but cannot remove it completely.
.UNINDENT
.UNINDENT
.SH AUTHOR
MongoDB, Inc
.SH COPYRIGHT
2017-present, MongoDB, Inc
.\" Generated by docutils manpage writer.
.
